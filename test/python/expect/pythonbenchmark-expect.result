======================== Findings ========================

------------- 1: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/other/ellipsis/ellipsis_003_T.py
Line 19: taint_sink(sliced)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/other/ellipsis/ellipsis_003_T.py","attribute":"fullfileManagerMade","type":"fileBegin","funcReceiverType":""}
Trace:
 /case/completeness/other/ellipsis/ellipsis_003_T.py
  AffectedNodeName: taint_src
  29:  SOURCE:      ellipsis_003_T(taint_src)
 /case/completeness/other/ellipsis/ellipsis_003_T.py
  AffectedNodeName: ellipsis_003_T
  29:  CALL:      ellipsis_003_T(taint_src)
 /case/completeness/other/ellipsis/ellipsis_003_T.py
  AffectedNodeName: taint_src
  14:  ARG PASS:  def ellipsis_003_T(taint_src):
 /case/completeness/other/ellipsis/ellipsis_003_T.py
  AffectedNodeName: arr
  15:  Var Pass:      arr = np.random.randint(taint_src, 10, (3, 3, 3))  # 创建一个 3x3x3 的随机数组
 /case/completeness/other/ellipsis/ellipsis_003_T.py
  AffectedNodeName: sliced
  18:  Var Pass:      sliced = arr[..., 0]  # 等价于 arr[:, :, 0]
 /case/completeness/other/ellipsis/ellipsis_003_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(sliced)

------------- 2: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
Line 24: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py","attribute":"fullfileManagerMade","type":"fileBegin","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: taint_src
  31:  SOURCE:      type_annotation_new_type_001_T(taint_src)
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: type_annotation_new_type_001_T
  31:  CALL:      type_annotation_new_type_001_T(taint_src)
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: taint_src
  19:  ARG PASS:  def type_annotation_new_type_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: process_user
  23:  CALL:      x = process_user(taint_src , Product("_"))
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: user
  20:  ARG PASS:      def process_user(user: User , product: Product):
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: [return value]
  21:  Return Value:          return user
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: process_user
  23:  CALL RETURN:     x = process_user(taint_src , Product("_"))
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: x
  23:  Var Pass:      x = process_user(taint_src , Product("_"))
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: taint_sink
  24:  SINK:      taint_sink(x)

------------- 3: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/bool_002_F.py
Line 12: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/bool_002_F.py","attribute":"fullfileManagerMade","type":"fileBegin","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/bool_002_F.py
  AffectedNodeName: taint_src
  19:  SOURCE:      bool_002_F(taint_src)
 /case/completeness/single_app_tracing/datatype/primitives/bool_002_F.py
  AffectedNodeName: bool_002_F
  19:  CALL:      bool_002_F(taint_src)
 /case/completeness/single_app_tracing/datatype/primitives/bool_002_F.py
  AffectedNodeName: taint_src
  11:  ARG PASS:  def bool_002_F(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/bool_002_F.py
  AffectedNodeName: taint_sink
  12:  SINK:      taint_sink(taint_src)

------------- 4: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
Line 17: taint_sink(sum)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py","attribute":"fullfileManagerMade","type":"fileBegin","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
  AffectedNodeName: taint_src
  24:  SOURCE:      type_annotation_complex_001_T(taint_src)
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
  AffectedNodeName: type_annotation_complex_001_T
  24:  CALL:      type_annotation_complex_001_T(taint_src)
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
  AffectedNodeName: taint_src
  12:  ARG PASS:  def type_annotation_complex_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
  AffectedNodeName: x
  13:  Var Pass:     x: complex = taint_src
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
  AffectedNodeName: sum
  15:  Var Pass:     sum = x + a
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:     taint_sink(sum)

------------- 5: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_001_T.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_001_T.py","attribute":"fullfileManagerMade","type":"fileBegin","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_001_T.py
  AffectedNodeName: taint_src
  24:  SOURCE:      unary_expression_not_001_T(taint_src)
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_001_T.py
  AffectedNodeName: unary_expression_not_001_T
  24:  CALL:      unary_expression_not_001_T(taint_src)
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_001_T.py
  AffectedNodeName: taint_src
  13:  ARG PASS:  def unary_expression_not_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 6: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_001_T.py
Line 13: taint_sink(arg)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_001_T.py","functionName":"argument_passing_value_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def argument_passing_value_001_T(taint_src):
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_001_T.py
  AffectedNodeName: process
  15:  CALL:      process(taint_src)
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_001_T.py
  AffectedNodeName: arg
  12:  ARG PASS:      def process(arg):
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:          taint_sink(arg)

------------- 7: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_003_T.py
Line 13: taint_sink(arg1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_003_T.py","functionName":"argument_passing_value_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_003_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def argument_passing_value_003_T(taint_src):
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_003_T.py
  AffectedNodeName: process
  15:  CALL:      process(taint_src, '_')
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_003_T.py
  AffectedNodeName: arg1
  12:  ARG PASS:      def process(arg1, arg2):
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_003_T.py
  AffectedNodeName: taint_sink
  13:  SINK:          taint_sink(arg1)

------------- 8: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_005_T.py
Line 13: taint_sink(arg)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_005_T.py","functionName":"argument_passing_value_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_005_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def argument_passing_value_005_T(taint_src):
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_005_T.py
  AffectedNodeName: process
  15:  CALL:      process(taint_src)
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_005_T.py
  AffectedNodeName: arg
  12:  ARG PASS:      def process(arg="safe_value"):
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_005_T.py
  AffectedNodeName: taint_sink
  13:  SINK:          taint_sink(arg)  # 显式参数应覆盖默认值

------------- 9: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_007_T.py
Line 13: taint_sink(tainted_arg)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_007_T.py","functionName":"argument_passing_value_007_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_007_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def argument_passing_value_007_T(taint_src):
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_007_T.py
  AffectedNodeName: tainted_arg
  15:  Var Pass:      process(safe_arg="_", tainted_arg=taint_src)
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_007_T.py
  AffectedNodeName: process
  15:  CALL:      process(safe_arg="_", tainted_arg=taint_src)
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_007_T.py
  AffectedNodeName: tainted_arg
  12:  ARG PASS:      def process(safe_arg, tainted_arg):
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_007_T.py
  AffectedNodeName: taint_sink
  13:  SINK:          taint_sink(tainted_arg)  #  正确识别关键字参数污染

------------- 10: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_009_T.py
Line 13: taint_sink(args.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_009_T.py","functionName":"argument_passing_value_009_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_009_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def argument_passing_value_009_T(taint_src):
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_009_T.py
  AffectedNodeName: wrapper
  15:  CALL:      wrapper(taint_src, "safe_value")
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_009_T.py
  AffectedNodeName: args
  12:  ARG PASS:      def wrapper(*args):
 /case/accuracy/context_sensitive/argument_return_value_passing/argument_passing_value_009_T.py
  AffectedNodeName: taint_sink
  13:  SINK:          taint_sink(args[0])  # 可变参数首元素识别

------------- 11: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_001_T.py
Line 18: taint_sink(data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_001_T.py","functionName":"return_value_passing_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def return_value_passing_001_T(taint_src):
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_001_T.py
  AffectedNodeName: [return value]
  14:  Return Value:          return taint_src
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_001_T.py
  AffectedNodeName: process
  17:  CALL RETURN:     data = process()
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_001_T.py
  AffectedNodeName: data
  17:  Var Pass:      data = process()
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_001_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(data)

------------- 12: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_003_T.py
Line 19: taint_sink(data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_003_T.py","functionName":"return_value_passing_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_003_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def return_value_passing_003_T(taint_src):
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_003_T.py
  AffectedNodeName: [return value]
  13:  Return Value:          return taint_src
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_003_T.py
  AffectedNodeName: inner1
  16:  CALL RETURN:         return inner1()
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_003_T.py
  AffectedNodeName: [return value]
  16:  Return Value:          return inner1()
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_003_T.py
  AffectedNodeName: inner2
  18:  CALL RETURN:     data = inner2()
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_003_T.py
  AffectedNodeName: data
  18:  Var Pass:      data = inner2()
 /case/accuracy/context_sensitive/argument_return_value_passing/return_value_passing_003_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(data)

------------- 13: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/context_sensitive/multi_invoke/multi_invoke_001_T.py
Line 17: taint_sink(a)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/context_sensitive/multi_invoke/multi_invoke_001_T.py","functionName":"multi_invoke_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def multi_invoke_001_T(taint_src):
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_001_T.py
  AffectedNodeName: process
  15:  CALL:      a = process(taint_src)
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_001_T.py
  AffectedNodeName: arg
  12:  ARG PASS:      def process(arg):
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_001_T.py
  AffectedNodeName: [return value]
  13:  Return Value:          return arg
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_001_T.py
  AffectedNodeName: process
  15:  CALL RETURN:     a = process(taint_src)
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_001_T.py
  AffectedNodeName: a
  15:  Var Pass:      a = process(taint_src)
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(a)

------------- 14: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
Line 19: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py","functionName":"multi_invoke_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def multi_invoke_003_T(taint_src):
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
  AffectedNodeName: process1
  18:  CALL:      result = process2(process1(taint_src))  # 污染值传递
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
  AffectedNodeName: arg
  12:  ARG PASS:      def process1(arg):
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
  AffectedNodeName: [return value]
  13:  Return Value:          return arg
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
  AffectedNodeName: process1
  18:  CALL RETURN:     result = process2(process1(taint_src))  # 污染值传递
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
  AffectedNodeName: process2
  18:  CALL:      result = process2(process1(taint_src))  # 污染值传递
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
  AffectedNodeName: arg
  15:  ARG PASS:      def process2(arg):
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
  AffectedNodeName: [return value]
  16:  Return Value:          return arg
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
  AffectedNodeName: process2
  18:  CALL RETURN:     result = process2(process1(taint_src))  # 污染值传递
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
  AffectedNodeName: result
  18:  Var Pass:      result = process2(process1(taint_src))  # 污染值传递
 /case/accuracy/context_sensitive/multi_invoke/multi_invoke_003_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(result)

------------- 15: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/context_sensitive/polymorphism/polymorphism_001_T.py
Line 25: taint_sink(sub.call())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/context_sensitive/polymorphism/polymorphism_001_T.py","functionName":"polymorphism_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/context_sensitive/polymorphism/polymorphism_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def polymorphism_001_T(taint_src):
 /case/accuracy/context_sensitive/polymorphism/polymorphism_001_T.py
  AffectedNodeName: [return value]
  18:  Return Value:              return taint_src  # 子类1返回污染源
 /case/accuracy/context_sensitive/polymorphism/polymorphism_001_T.py
  AffectedNodeName: call
  25:  CALL RETURN:     taint_sink(sub.call())  # 调用多态方法
 /case/accuracy/context_sensitive/polymorphism/polymorphism_001_T.py
  AffectedNodeName: taint_sink
  25:  SINK:      taint_sink(sub.call())  # 调用多态方法

------------- 16: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/context_sensitive/polymorphism/polymorphism_003_T.py
Line 25: taint_sink(sub.dynamic_call())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/context_sensitive/polymorphism/polymorphism_003_T.py","functionName":"polymorphism_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/context_sensitive/polymorphism/polymorphism_003_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def polymorphism_003_T(taint_src):
 /case/accuracy/context_sensitive/polymorphism/polymorphism_003_T.py
  AffectedNodeName: [return value]
  20:  Return Value:          return taint_src
 /case/accuracy/context_sensitive/polymorphism/polymorphism_003_T.py
  AffectedNodeName: dynamic_method
  25:  CALL RETURN:     taint_sink(sub.dynamic_call())  # 调用动态绑定的方法
 /case/accuracy/context_sensitive/polymorphism/polymorphism_003_T.py
  AffectedNodeName: taint_sink
  25:  SINK:      taint_sink(sub.dynamic_call())  # 调用动态绑定的方法

------------- 17: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/class/constructor_field_001_T.py
Line 18: taint_sink(obj.data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/class/constructor_field_001_T.py","functionName":"constructor_field_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/class/constructor_field_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def constructor_field_001_T(taint_src):
 /case/accuracy/field_sensitive/class/constructor_field_001_T.py
  14:  Var Pass:              self.data = taint_src
 /case/accuracy/field_sensitive/class/constructor_field_001_T.py
  AffectedNodeName: obj
  17:  Var Pass:      obj = A()
 /case/accuracy/field_sensitive/class/constructor_field_001_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(obj.data)

------------- 18: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/class/constructor_field_003_T.py
Line 18: taint_sink(obj.data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/class/constructor_field_003_T.py","functionName":"constructor_field_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/class/constructor_field_003_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def constructor_field_003_T(taint_src):
 /case/accuracy/field_sensitive/class/constructor_field_003_T.py
  AffectedNodeName: __init__
  17:  CALL:      obj = A(taint_src)
 /case/accuracy/field_sensitive/class/constructor_field_003_T.py
  AffectedNodeName: param
  13:  ARG PASS:          def __init__(self, param):
 /case/accuracy/field_sensitive/class/constructor_field_003_T.py
  14:  Var Pass:              self.data = param
 /case/accuracy/field_sensitive/class/constructor_field_003_T.py
  AffectedNodeName: obj
  17:  Var Pass:      obj = A(taint_src)
 /case/accuracy/field_sensitive/class/constructor_field_003_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(obj.data)

------------- 19: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/class/constructor_field_005_T.py
Line 27: taint_sink(obj.field)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/class/constructor_field_005_T.py","functionName":"constructor_field_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/class/constructor_field_005_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def constructor_field_005_T(taint_src):
 /case/accuracy/field_sensitive/class/constructor_field_005_T.py
  AffectedNodeName: __init__
  12:  CALL:      a = ClassA(taint_src)
 /case/accuracy/field_sensitive/class/constructor_field_005_T.py
  AffectedNodeName: taint_src
  18:  ARG PASS:      def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/constructor_field_005_T.py
  19:  Var Pass:          self.field = taint_src
 /case/accuracy/field_sensitive/class/constructor_field_005_T.py
  AffectedNodeName: a
  12:  Var Pass:      a = ClassA(taint_src)
 /case/accuracy/field_sensitive/class/constructor_field_005_T.py
  AffectedNodeName: process
  14:  CALL:      process(a)
 /case/accuracy/field_sensitive/class/constructor_field_005_T.py
  AffectedNodeName: obj
  26:  ARG PASS:  def process(obj):
 /case/accuracy/field_sensitive/class/constructor_field_005_T.py
  AffectedNodeName: taint_sink
  27:  SINK:      taint_sink(obj.field)  # 通过对象类型区分字段

------------- 20: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/class/field_len_001_T.py
Line 27: taint_sink(a.b.c.data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/class/field_len_001_T.py","functionName":"field_len_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def field_len_001_T(taint_src):
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  AffectedNodeName: __init__
  26:  CALL:      a = A(taint_src)
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  AffectedNodeName: taint_src
  13:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  AffectedNodeName: __init__
  14:  CALL:              self.b = B(taint_src)  # 将参数传递给下一层类
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  AffectedNodeName: taint_src
  17:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  AffectedNodeName: __init__
  18:  CALL:              self.c = C(taint_src)  # 继续传递参数到 C
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  AffectedNodeName: taint_src
  21:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  22:  Var Pass:              self.data = taint_src   # 使用参数赋值给 data
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  18:  Var Pass:              self.c = C(taint_src)  # 继续传递参数到 C
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  14:  Var Pass:              self.b = B(taint_src)  # 将参数传递给下一层类
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  AffectedNodeName: a
  26:  Var Pass:      a = A(taint_src)
 /case/accuracy/field_sensitive/class/field_len_001_T.py
  AffectedNodeName: taint_sink
  27:  SINK:      taint_sink(a.b.c.data)        # 通过路径访问 data 属性

------------- 21: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/class/field_len_003_T.py
Line 41: taint_sink(s1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/class/field_len_003_T.py","functionName":"field_len_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def field_len_003_T(taint_src):
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: __init__
  38:  CALL:      a = A(taint_src)
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: taint_src
  13:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: __init__
  14:  CALL:              self.b = B(taint_src)  # 传递参数到 B
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: taint_src
  17:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: __init__
  18:  CALL:              self.c = C(taint_src)  # 传递参数到 C
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: taint_src
  21:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: __init__
  22:  CALL:              self.d = D(taint_src)  # 传递参数到 D
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: taint_src
  25:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: __init__
  26:  CALL:              self.e = E(taint_src)  # 传递参数到 E
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: taint_src
  29:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: __init__
  30:  CALL:              self.f = F(taint_src)  # 传递参数到 F
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: taint_src
  33:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  34:  Var Pass:              self.data = taint_src   # 污染数据
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  30:  Var Pass:              self.f = F(taint_src)  # 传递参数到 F
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  26:  Var Pass:              self.e = E(taint_src)  # 传递参数到 E
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  22:  Var Pass:              self.d = D(taint_src)  # 传递参数到 D
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  18:  Var Pass:              self.c = C(taint_src)  # 传递参数到 C
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  14:  Var Pass:              self.b = B(taint_src)  # 传递参数到 B
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: a
  38:  Var Pass:      a = A(taint_src)
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: s
  39:  Var Pass:      s = a.b.c                     # 中间变量
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: s1
  40:  Var Pass:      s1 = s.d.e.f.data            # 完整路径访问 a.b.c.d.e.f.data
 /case/accuracy/field_sensitive/class/field_len_003_T.py
  AffectedNodeName: taint_sink
  41:  SINK:      taint_sink(s1)             # 传递污染数据

------------- 22: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/class/field_len_005_T.py
Line 63: taint_sink(a.b.c.d.e.f.g.h.i.j.k.l.data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/class/field_len_005_T.py","functionName":"field_len_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def field_len_005_T(taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  62:  CALL:      a = A(taint_src)
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  13:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  14:  CALL:              self.b = B(taint_src)  # 传递参数到 B
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  17:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  18:  CALL:              self.c = C(taint_src)  # 传递参数到 C
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  21:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  22:  CALL:              self.d = D(taint_src)  # 传递参数到 D
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  25:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  26:  CALL:              self.e = E(taint_src)  # 传递参数到 E
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  29:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  30:  CALL:              self.f = F(taint_src)  # 传递参数到 F
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  33:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  34:  CALL:              self.g = G(taint_src)  # 传递参数到 G
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  37:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  38:  CALL:              self.h = H(taint_src)  # 传递参数到 H
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  41:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  42:  CALL:              self.i = I(taint_src)  # 传递参数到 I
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  45:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  46:  CALL:              self.j = J(taint_src)  # 传递参数到 J
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  49:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  50:  CALL:              self.k = K(taint_src)  # 传递参数到 K
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  53:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: __init__
  54:  CALL:              self.l = L(taint_src)  # 传递参数到 L
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_src
  57:  ARG PASS:          def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  58:  Var Pass:              self.data = taint_src   # 污染数据
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  54:  Var Pass:              self.l = L(taint_src)  # 传递参数到 L
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  50:  Var Pass:              self.k = K(taint_src)  # 传递参数到 K
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  46:  Var Pass:              self.j = J(taint_src)  # 传递参数到 J
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  42:  Var Pass:              self.i = I(taint_src)  # 传递参数到 I
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  38:  Var Pass:              self.h = H(taint_src)  # 传递参数到 H
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  34:  Var Pass:              self.g = G(taint_src)  # 传递参数到 G
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  30:  Var Pass:              self.f = F(taint_src)  # 传递参数到 F
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  26:  Var Pass:              self.e = E(taint_src)  # 传递参数到 E
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  22:  Var Pass:              self.d = D(taint_src)  # 传递参数到 D
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  18:  Var Pass:              self.c = C(taint_src)  # 传递参数到 C
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  14:  Var Pass:              self.b = B(taint_src)  # 传递参数到 B
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: a
  62:  Var Pass:      a = A(taint_src)
 /case/accuracy/field_sensitive/class/field_len_005_T.py
  AffectedNodeName: taint_sink
  63:  SINK:      taint_sink(a.b.c.d.e.f.g.h.i.j.k.l.data)  # 完整路径访问 a.b.c.d.e.f.g.h.i.j.k.l.data

------------- 23: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/class/inheritance_001_T.py
Line 14: taint_sink(parent_obj.field)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/class/inheritance_001_T.py","functionName":"inheritance_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/class/inheritance_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def inheritance_001_T(taint_src):
 /case/accuracy/field_sensitive/class/inheritance_001_T.py
  AffectedNodeName: __init__
  12:  CALL:      parent_obj = Parent(taint_src)
 /case/accuracy/field_sensitive/class/inheritance_001_T.py
  AffectedNodeName: taint_src
  18:  ARG PASS:      def __init__(self, taint_src):
 /case/accuracy/field_sensitive/class/inheritance_001_T.py
  19:  Var Pass:          self.field = taint_src  # 父类字段携带污点
 /case/accuracy/field_sensitive/class/inheritance_001_T.py
  AffectedNodeName: parent_obj
  12:  Var Pass:      parent_obj = Parent(taint_src)
 /case/accuracy/field_sensitive/class/inheritance_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(parent_obj.field)  # 应检测到污点

------------- 24: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/multidimensional_collection/list_mc_001_T.py
Line 20: taint_sink(s.0.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/multidimensional_collection/list_mc_001_T.py","functionName":"list_mc_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/multidimensional_collection/list_mc_001_T.py
  AffectedNodeName: taint_src
  18:  SOURCE:  def list_mc_001_T(taint_src):
 /case/accuracy/field_sensitive/multidimensional_collection/list_mc_001_T.py
  AffectedNodeName: s
  19:  Var Pass:      s = [[taint_src], ["b"], "c"]
 /case/accuracy/field_sensitive/multidimensional_collection/list_mc_001_T.py
  AffectedNodeName: taint_sink
  20:  SINK:      taint_sink(s[0][0])

------------- 25: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/multidimensional_collection/list_mc_003_T.py
Line 15: taint_sink(s.0.0.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/multidimensional_collection/list_mc_003_T.py","functionName":"list_mc_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/multidimensional_collection/list_mc_003_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def list_mc_003_T(taint_src):
 /case/accuracy/field_sensitive/multidimensional_collection/list_mc_003_T.py
  AffectedNodeName: s
  14:  Var Pass:      s = [[[taint_src, "x"], ["y", "z"]], [["a", "b"], ["c", "d"]]]
 /case/accuracy/field_sensitive/multidimensional_collection/list_mc_003_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(s[0][0][0])  # 访问三维污染元素

------------- 26: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/multidimensional_collection/list_mc_006_F.py
Line 16: taint_sink(arr.0.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/multidimensional_collection/list_mc_006_F.py","functionName":"list_mc_006_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/multidimensional_collection/list_mc_006_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def list_mc_006_F(taint_src):
 /case/accuracy/field_sensitive/multidimensional_collection/list_mc_006_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(arr[0][0])

------------- 27: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/multidimensional_collection/map_mc_001_T.py
Line 15: taint_sink(d.a.b)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/multidimensional_collection/map_mc_001_T.py","functionName":"map_mc_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/multidimensional_collection/map_mc_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def map_mc_001_T(taint_src):
 /case/accuracy/field_sensitive/multidimensional_collection/map_mc_001_T.py
  AffectedNodeName: d
  14:  Var Pass:      d = {"a": {"b": taint_src}, "c": {"d": "e"}}
 /case/accuracy/field_sensitive/multidimensional_collection/map_mc_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(d["a"]["b"])  # 访问污染路径

------------- 28: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/multidimensional_collection/map_mc_003_T.py
Line 17: taint_sink(d2.b.c.b.a)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/multidimensional_collection/map_mc_003_T.py","functionName":"map_mc_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/multidimensional_collection/map_mc_003_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def map_mc_003_T(taint_src):
 /case/accuracy/field_sensitive/multidimensional_collection/map_mc_003_T.py
  AffectedNodeName: d1
  14:  Var Pass:      d1 = {"a": taint_src,"f":"_"}
 /case/accuracy/field_sensitive/multidimensional_collection/map_mc_003_T.py
  AffectedNodeName: d2
  15:  Var Pass:      d2 = {"b": d1}
 /case/accuracy/field_sensitive/multidimensional_collection/map_mc_003_T.py
  16:  Var Pass:      d1["c"] = d2
 /case/accuracy/field_sensitive/multidimensional_collection/map_mc_003_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(d2["b"]["c"]["b"]["a"])  # 递归路径访问污染

------------- 29: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
Line 15: taint_sink(data2)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py","functionName":"asynchronous_chain_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  async def asynchronous_chain_001_T(taint_src):
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: async_chain_step1
  13:  CALL:      data1 = await async_chain_step1(taint_src)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: taint_src
  19:  ARG PASS:  async def async_chain_step1(taint_src):
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: [return value]
  21:  Return Value:      return taint_src
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: async_chain_step1
  13:  CALL RETURN:     data1 = await async_chain_step1(taint_src)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: data1
  13:  Var Pass:      data1 = await async_chain_step1(taint_src)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: async_chain_step2
  14:  CALL:      data2 = await async_chain_step2(data1)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: data
  23:  ARG PASS:  async def async_chain_step2(data):
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: [return value]
  25:  Return Value:      return data
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: async_chain_step2
  14:  CALL RETURN:     data2 = await async_chain_step2(data1)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: data2
  14:  Var Pass:      data2 = await async_chain_step2(data1)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(data2)  # 通过分支保留污点

------------- 30: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
Line 15: taint_sink(data2)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py","functionName":"main","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: taint_src
  30:  SOURCE:  async def main(taint_src):
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: asynchronous_chain_001_T
  31:  CALL:      await asynchronous_chain_001_T(taint_src)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: taint_src
  12:  ARG PASS:  async def asynchronous_chain_001_T(taint_src):
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: async_chain_step1
  13:  CALL:      data1 = await async_chain_step1(taint_src)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: taint_src
  19:  ARG PASS:  async def async_chain_step1(taint_src):
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: [return value]
  21:  Return Value:      return taint_src
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: async_chain_step1
  13:  CALL RETURN:     data1 = await async_chain_step1(taint_src)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: data1
  13:  Var Pass:      data1 = await async_chain_step1(taint_src)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: async_chain_step2
  14:  CALL:      data2 = await async_chain_step2(data1)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: data
  23:  ARG PASS:  async def async_chain_step2(data):
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: [return value]
  25:  Return Value:      return data
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: async_chain_step2
  14:  CALL RETURN:     data2 = await async_chain_step2(data1)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: data2
  14:  Var Pass:      data2 = await async_chain_step2(data1)
 /case/accuracy/flow_sensitive/asynchronous/asynchronous_chain_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(data2)  # 通过分支保留污点

------------- 31: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
Line 18: taint_sink(data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py","functionName":"asyncio_await_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  async def asyncio_await_001_T(taint_src):
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: [return value]
  15:  Return Value:          return taint_src
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: process
  17:  CALL RETURN:     data = await process()
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: data
  17:  Var Pass:      data = await process()
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(data)

------------- 32: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
Line 18: taint_sink(data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py","functionName":"main","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: taint_src
  25:  SOURCE:  async def main(taint_src):
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: asyncio_await_001_T
  26:  CALL:      await asyncio_await_001_T(taint_src)
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: taint_src
  12:  ARG PASS:  async def asyncio_await_001_T(taint_src):
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: [return value]
  15:  Return Value:          return taint_src
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: process
  17:  CALL RETURN:     data = await process()
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: data
  17:  Var Pass:      data = await process()
 /case/accuracy/flow_sensitive/asynchronous/asyncio_await_001_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(data)

------------- 33: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/flow_sensitive/loop_stmt/for_enumerate_001_T.py
Line 14: taint_sink(value+: +index)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/flow_sensitive/loop_stmt/for_enumerate_001_T.py","functionName":"for_enumerate_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/flow_sensitive/loop_stmt/for_enumerate_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def for_enumerate_001_T(taint_src):
 /case/accuracy/flow_sensitive/loop_stmt/for_enumerate_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:          taint_sink(f"{value}: {index}")

------------- 34: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/flow_sensitive/loop_stmt/for_zip_001_T.py
Line 14: taint_sink(a+ and +b)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/flow_sensitive/loop_stmt/for_zip_001_T.py","functionName":"for_zip_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/flow_sensitive/loop_stmt/for_zip_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def for_zip_001_T(taint_src):
 /case/accuracy/flow_sensitive/loop_stmt/for_zip_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:          taint_sink(f"{a} and {b}")

------------- 35: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/flow_sensitive/normal_stmt/assign_expression_stmt_001_T.py
Line 13: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/flow_sensitive/normal_stmt/assign_expression_stmt_001_T.py","functionName":"assign_expression_stmt_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/flow_sensitive/normal_stmt/assign_expression_stmt_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def assign_expression_stmt_001_T(taint_src):
 /case/accuracy/flow_sensitive/normal_stmt/assign_expression_stmt_001_T.py
  AffectedNodeName: result
  12:  Var Pass:      result = taint_src
 /case/accuracy/flow_sensitive/normal_stmt/assign_expression_stmt_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      taint_sink(result)

------------- 36: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/object_sensitive/class/constructor_object_sensitive_001_T.py
Line 19: taint_sink(obj)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/object_sensitive/class/constructor_object_sensitive_001_T.py","functionName":"constructor_object_sensitive_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def constructor_object_sensitive_001_T(taint_src):
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_001_T.py
  AffectedNodeName: __init__
  17:  CALL:      obj = A(taint_src)  # 污染源实例
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_001_T.py
  AffectedNodeName: data
  14:  ARG PASS:          def __init__(self, data):
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_001_T.py
  15:  Var Pass:              self.data = data  # 污染源或干净值赋值给实例的 data 属性
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_001_T.py
  AffectedNodeName: obj
  17:  Var Pass:      obj = A(taint_src)  # 污染源实例
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_001_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(obj)     # 传递污染源实例 obj

------------- 37: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/object_sensitive/class/constructor_object_sensitive_003_T.py
Line 25: taint_sink(parent_tainted)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/object_sensitive/class/constructor_object_sensitive_003_T.py","functionName":"constructor_object_sensitive_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def constructor_object_sensitive_003_T(taint_src):
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_003_T.py
  AffectedNodeName: __init__
  21:  CALL:      parent_tainted = Parent(taint_src)
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_003_T.py
  AffectedNodeName: data
  14:  ARG PASS:          def __init__(self, data):
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_003_T.py
  15:  Var Pass:              self.data = data
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_003_T.py
  AffectedNodeName: parent_tainted
  21:  Var Pass:      parent_tainted = Parent(taint_src)
 /case/accuracy/object_sensitive/class/constructor_object_sensitive_003_T.py
  AffectedNodeName: taint_sink
  25:  SINK:      taint_sink(parent_tainted)  # 传递污染的父类对象

------------- 38: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/object_sensitive/collection/array_object_sensitive_001_T.py
Line 18: taint_sink(s)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/object_sensitive/collection/array_object_sensitive_001_T.py","functionName":"array_object_sensitive_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/object_sensitive/collection/array_object_sensitive_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def array_object_sensitive_001_T(taint_src):
 /case/accuracy/object_sensitive/collection/array_object_sensitive_001_T.py
  AffectedNodeName: char_array
  15:  Var Pass:      char_array = array.array('u', taint_src)  # 每个字符作为独立元素
 /case/accuracy/object_sensitive/collection/array_object_sensitive_001_T.py
  AffectedNodeName: s
  16:  Var Pass:      s = array.array('u', ['c', 'b', char_array[0]])
 /case/accuracy/object_sensitive/collection/array_object_sensitive_001_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(s)

------------- 39: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/object_sensitive/collection/list_object_sensitive_001_T.py
Line 16: taint_sink(s)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/object_sensitive/collection/list_object_sensitive_001_T.py","functionName":"list_object_sensitive_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/object_sensitive/collection/list_object_sensitive_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def list_object_sensitive_001_T(taint_src):
 /case/accuracy/object_sensitive/collection/list_object_sensitive_001_T.py
  AffectedNodeName: s
  13:  Var Pass:      s = [taint_src, "b", "c"]
 /case/accuracy/object_sensitive/collection/list_object_sensitive_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(s)

------------- 40: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/object_sensitive/collection/list_object_sensitive_003_T.py
Line 16: taint_sink(s)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/object_sensitive/collection/list_object_sensitive_003_T.py","functionName":"list_object_sensitive_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/object_sensitive/collection/list_object_sensitive_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def list_object_sensitive_003_T(taint_src):
 /case/accuracy/object_sensitive/collection/list_object_sensitive_003_T.py
  AffectedNodeName: s
  13:  Var Pass:      s = [[taint_src], ["b"], "c"]
 /case/accuracy/object_sensitive/collection/list_object_sensitive_003_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(s)

------------- 41: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/object_sensitive/collection/list_object_sensitive_005_T.py
Line 18: taint_sink(s)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/object_sensitive/collection/list_object_sensitive_005_T.py","functionName":"list_object_sensitive_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/object_sensitive/collection/list_object_sensitive_005_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def list_object_sensitive_005_T(taint_src):
 /case/accuracy/object_sensitive/collection/list_object_sensitive_005_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(s)

------------- 42: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/object_sensitive/collection/list_object_sensitive_008_F.py
Line 18: taint_sink(s)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/object_sensitive/collection/list_object_sensitive_008_F.py","functionName":"list_object_sensitive_008_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/object_sensitive/collection/list_object_sensitive_008_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def list_object_sensitive_008_F(taint_src):
 /case/accuracy/object_sensitive/collection/list_object_sensitive_008_F.py
  AffectedNodeName: s
  13:  Var Pass:      s = [taint_src, "b"]
 /case/accuracy/object_sensitive/collection/list_object_sensitive_008_F.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(s)  # 传递被覆盖后的列表

------------- 43: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/object_sensitive/collection/map_object_sensitive_001_T.py
Line 18: taint_sink(map)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/object_sensitive/collection/map_object_sensitive_001_T.py","functionName":"map_object_sensitive_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/object_sensitive/collection/map_object_sensitive_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def map_object_sensitive_001_T(taint_src):
 /case/accuracy/object_sensitive/collection/map_object_sensitive_001_T.py
  13:  Var Pass:      map["key1"] = taint_src
 /case/accuracy/object_sensitive/collection/map_object_sensitive_001_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(map)

------------- 44: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/object_sensitive/collection/set_object_sensitive_001_T.py
Line 17: taint_sink(polluted_set)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/object_sensitive/collection/set_object_sensitive_001_T.py","functionName":"set_object_sensitive_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/object_sensitive/collection/set_object_sensitive_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def set_object_sensitive_001_T(taint_src):
 /case/accuracy/object_sensitive/collection/set_object_sensitive_001_T.py
  AffectedNodeName: polluted_set
  13:  Var Pass:      polluted_set = set(taint_src)
 /case/accuracy/object_sensitive/collection/set_object_sensitive_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(polluted_set)

------------- 45: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/path_sensitive/exception_throw/exception_throw_001_T.py
Line 14: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/path_sensitive/exception_throw/exception_throw_001_T.py","functionName":"exception_throw_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/path_sensitive/exception_throw/exception_throw_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def exception_throw_001_T(taint_src):
 /case/accuracy/path_sensitive/exception_throw/exception_throw_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:          taint_sink(taint_src)

------------- 46: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/path_sensitive/exception_throw/exception_throw_002_F.py
Line 14: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/path_sensitive/exception_throw/exception_throw_002_F.py","functionName":"exception_throw_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/path_sensitive/exception_throw/exception_throw_002_F.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def exception_throw_002_F(taint_src):
 /case/accuracy/path_sensitive/exception_throw/exception_throw_002_F.py
  AffectedNodeName: taint_sink
  14:  SINK:          taint_sink(taint_src)

------------- 47: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/path_sensitive/explicit_jump_control/continue_002_F.py
Line 18: taint_sink(res)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/path_sensitive/explicit_jump_control/continue_002_F.py","functionName":"continue_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/path_sensitive/explicit_jump_control/continue_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def continue_002_F(taint_src):
 /case/accuracy/path_sensitive/explicit_jump_control/continue_002_F.py
  AffectedNodeName: res
  16:  Var Pass:              res = taint_src
 /case/accuracy/path_sensitive/explicit_jump_control/continue_002_F.py
  AffectedNodeName: taint_sink
  18:  SINK:              taint_sink(res)

------------- 48: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/path_sensitive/explicit_jump_control/return_001_T.py
Line 15: taint_sink(arg1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/path_sensitive/explicit_jump_control/return_001_T.py","functionName":"return_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/path_sensitive/explicit_jump_control/return_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def return_001_T(taint_src):
 /case/accuracy/path_sensitive/explicit_jump_control/return_001_T.py
  AffectedNodeName: process
  19:  CALL:      process(taint_src, 'some_condition')  # 调用时 arg2 固定为 'some_condition'
 /case/accuracy/path_sensitive/explicit_jump_control/return_001_T.py
  AffectedNodeName: arg1
  13:  ARG PASS:      def process(arg1, arg2):
 /case/accuracy/path_sensitive/explicit_jump_control/return_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:              taint_sink(arg1)  # 直接传递污染源

------------- 49: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/path_sensitive/explicit_jump_control/return_002_F.py
Line 16: taint_sink(arg1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/path_sensitive/explicit_jump_control/return_002_F.py","functionName":"return_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/path_sensitive/explicit_jump_control/return_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def return_002_F(taint_src):
 /case/accuracy/path_sensitive/explicit_jump_control/return_002_F.py
  AffectedNodeName: process
  18:  CALL:      process(taint_src, 'some_condition')  # 调用时 arg2 固定为 'some_condition'
 /case/accuracy/path_sensitive/explicit_jump_control/return_002_F.py
  AffectedNodeName: arg1
  13:  ARG PASS:      def process(arg1, arg2):
 /case/accuracy/path_sensitive/explicit_jump_control/return_002_F.py
  AffectedNodeName: taint_sink
  16:  SINK:          taint_sink(arg1)      # 未执行

------------- 50: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_002_T.py
Line 22: taint_sink(getattr(obj, name))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_002_T.py","functionName":"dynamic_call_reflect_002_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_002_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def dynamic_call_reflect_002_T(taint_src):
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_002_T.py
  AffectedNodeName: __init__
  17:  CALL:      obj = Obj(taint_src)
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_002_T.py
  AffectedNodeName: name
  14:  ARG PASS:          def __init__(self, name):
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_002_T.py
  15:  Var Pass:              self.name = name
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_002_T.py
  AffectedNodeName: obj
  17:  Var Pass:      obj = Obj(taint_src)
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_002_T.py
  AffectedNodeName: taint_sink
  22:  SINK:      taint_sink(getattr(obj, 'name'))

------------- 51: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_004_F.py
Line 21: taint_sink(getattr(obj, foo))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_004_F.py","functionName":"dynamic_call_reflect_004_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_004_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def dynamic_call_reflect_004_F(taint_src):
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_004_F.py
  AffectedNodeName: __init__
  17:  CALL:      obj = Obj(taint_src)
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_004_F.py
  AffectedNodeName: data
  14:  ARG PASS:          def __init__(self, data):
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_004_F.py
  15:  Var Pass:              self.data = data
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_004_F.py
  AffectedNodeName: obj
  17:  Var Pass:      obj = Obj(taint_src)
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_004_F.py
  AffectedNodeName: taint_sink
  21:  SINK:      taint_sink(getattr(obj, 'foo'))

------------- 52: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_006_F.py
Line 21: taint_sink(getattr(obj, data))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_006_F.py","functionName":"dynamic_call_reflect_006_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_006_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def dynamic_call_reflect_006_F(taint_src):
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_006_F.py
  AffectedNodeName: __init__
  17:  CALL:      obj = Obj(taint_src)
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_006_F.py
  AffectedNodeName: value
  14:  ARG PASS:          def __init__(self,value):
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_006_F.py
  15:  Var Pass:              self.data = value
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_006_F.py
  AffectedNodeName: obj
  17:  Var Pass:      obj = Obj(taint_src)
 /case/completeness/dynamic_tracing/dynamic_call/dynamic_call_reflect_006_F.py
  AffectedNodeName: taint_sink
  21:  SINK:      taint_sink(getattr(obj, 'data'))

------------- 53: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/other/ellipsis/ellipsis_001_T.py
Line 16: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/other/ellipsis/ellipsis_001_T.py","functionName":"ellipsis_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/other/ellipsis/ellipsis_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def ellipsis_001_T(taint_src):
 /case/completeness/other/ellipsis/ellipsis_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(taint_src)

------------- 54: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/other/ellipsis/ellipsis_003_T.py
Line 19: taint_sink(sliced)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/other/ellipsis/ellipsis_003_T.py","functionName":"ellipsis_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/other/ellipsis/ellipsis_003_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def ellipsis_003_T(taint_src):
 /case/completeness/other/ellipsis/ellipsis_003_T.py
  AffectedNodeName: arr
  15:  Var Pass:      arr = np.random.randint(taint_src, 10, (3, 3, 3))  # 创建一个 3x3x3 的随机数组
 /case/completeness/other/ellipsis/ellipsis_003_T.py
  AffectedNodeName: sliced
  18:  Var Pass:      sliced = arr[..., 0]  # 等价于 arr[:, :, 0]
 /case/completeness/other/ellipsis/ellipsis_003_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(sliced)

------------- 55: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/other/typeignore/typeignore_001_T.py
Line 15: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/other/typeignore/typeignore_001_T.py","functionName":"typeignore_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/other/typeignore/typeignore_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def typeignore_001_T(taint_src):
 /case/completeness/other/typeignore/typeignore_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(taint_src)  # type: ignore

------------- 56: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/alias/alias_001_T.py
Line 16: taint_sink(a.value)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/alias/alias_001_T.py","functionName":"alias_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/alias/alias_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def alias_001_T(taint_src):
 /case/completeness/single_app_tracing/alias/alias_001_T.py
  15:  Var Pass:      b['value'] = taint_src
 /case/completeness/single_app_tracing/alias/alias_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(a['value'])

------------- 57: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/alias/alias_003_T.py
Line 17: taint_sink(a.value)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/alias/alias_003_T.py","functionName":"alias_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/alias/alias_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def alias_003_T(taint_src):
 /case/completeness/single_app_tracing/alias/alias_003_T.py
  16:  Var Pass:      c['value'] = taint_src  # 修改末级别名
 /case/completeness/single_app_tracing/alias/alias_003_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(a['value'])  # 应被污染

------------- 58: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/alias/alias_005_T.py
Line 16: taint_sink(a.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/alias/alias_005_T.py","functionName":"alias_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/alias/alias_005_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def alias_005_T(taint_src):
 /case/completeness/single_app_tracing/alias/alias_005_T.py
  15:  Var Pass:      b[0] = taint_src  # 修改列表元素
 /case/completeness/single_app_tracing/alias/alias_005_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(a[0])  # 应被污染

------------- 59: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/alias/alias_007_T.py
Line 18: taint_sink(a.value)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/alias/alias_007_T.py","functionName":"alias_007_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/alias/alias_007_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def alias_007_T(taint_src):
 /case/completeness/single_app_tracing/alias/alias_007_T.py
  14:  Var Pass:          obj['value'] = taint_src  # 通过参数修改
 /case/completeness/single_app_tracing/alias/alias_007_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(a['value'])  # 应被污染

------------- 60: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/alias/alias_009_T.py
Line 20: taint_sink(a.data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/alias/alias_009_T.py","functionName":"alias_009_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/alias/alias_009_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def alias_009_T(taint_src):
 /case/completeness/single_app_tracing/alias/alias_009_T.py
  19:  Var Pass:      b.data = taint_src
 /case/completeness/single_app_tracing/alias/alias_009_T.py
  AffectedNodeName: taint_sink
  20:  SINK:      taint_sink(a.data)

------------- 61: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/alias/type_alias_001_T.py
Line 17: taint_sink(points.0.x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/alias/type_alias_001_T.py","functionName":"type_alias_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/alias/type_alias_001_T.py
  AffectedNodeName: taint_src
  15:  SOURCE:  def type_alias_001_T(taint_src):
 /case/completeness/single_app_tracing/alias/type_alias_001_T.py
  AffectedNodeName: points
  16:  Var Pass:      points: PointList = [{'x': taint_src, 'y': 1.0}, {'x': 2.0, 'y': 3.0}]
 /case/completeness/single_app_tracing/alias/type_alias_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(points[0]['x'])

------------- 62: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/alias/type_alias_003_T.py
Line 22: taint_sink(points.0.x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/alias/type_alias_003_T.py","functionName":"type_alias_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/alias/type_alias_003_T.py
  AffectedNodeName: taint_src
  20:  SOURCE:  def type_alias_003_T(taint_src: str):
 /case/completeness/single_app_tracing/alias/type_alias_003_T.py
  AffectedNodeName: __init__
  21:  CALL:      points: Points = [Point(taint_src, "SAFE"), Point("2.0", "3.0")]
 /case/completeness/single_app_tracing/alias/type_alias_003_T.py
  AffectedNodeName: x
  13:  ARG PASS:      def __init__(self, x: str, y: str):
 /case/completeness/single_app_tracing/alias/type_alias_003_T.py
  14:  Var Pass:          self.x = x
 /case/completeness/single_app_tracing/alias/type_alias_003_T.py
  AffectedNodeName: points
  21:  Var Pass:      points: Points = [Point(taint_src, "SAFE"), Point("2.0", "3.0")]
 /case/completeness/single_app_tracing/alias/type_alias_003_T.py
  AffectedNodeName: taint_sink
  22:  SINK:      taint_sink(points[0].x)

------------- 63: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_001_T.py
Line 19: taint_sink(s.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_001_T.py","functionName":"array_no_solver_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def array_no_solver_001_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_001_T.py
  AffectedNodeName: char_array
  16:  Var Pass:      char_array = array.array('u', taint_src)  # 每个字符作为独立元素
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_001_T.py
  AffectedNodeName: s
  18:  Var Pass:      s = array.array('u', [char_array[0], 'b', 'c'])  # 仅保留首字符
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_001_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(s[0])

------------- 64: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_002_F.py
Line 19: taint_sink(s.1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_002_F.py","functionName":"array_no_solver_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_002_F.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def array_no_solver_002_F(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_002_F.py
  AffectedNodeName: char_array
  16:  Var Pass:      char_array = array.array('u', taint_src)  # 每个字符作为独立元素
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_002_F.py
  AffectedNodeName: s
  18:  Var Pass:      s = array.array('u', [char_array[0], 'b', 'c'])  # 仅保留首字符
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_002_F.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(s[1])

------------- 65: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_003_T.py
Line 19: taint_sink(arr.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_003_T.py","functionName":"array_no_solver_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_003_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def array_no_solver_003_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_003_T.py
  AffectedNodeName: char_array
  16:  Var Pass:      char_array = array.array('u', taint_src)  # 每个字符作为独立元素
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_003_T.py
  17:  Var Pass:      arr[0] = char_array[0] # 动态修改索引0
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_003_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(arr[0])  # 访问修改后的污染元素

------------- 66: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_004_F.py
Line 19: taint_sink(arr.1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_004_F.py","functionName":"array_no_solver_004_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_004_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def array_no_solver_004_F(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_004_F.py
  AffectedNodeName: char_array
  16:  Var Pass:      char_array = array.array('u', taint_src)  # 每个字符作为独立元素
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_004_F.py
  17:  Var Pass:      arr[0] = char_array[0] # 动态修改索引0
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/array_no_solver_004_F.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(arr[1])  # 访问修改后的污染元素

------------- 67: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/list_no_solver_001_T.py
Line 13: taint_sink(s.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/list_no_solver_001_T.py","functionName":"list_no_solver_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/list_no_solver_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def list_no_solver_001_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/list_no_solver_001_T.py
  AffectedNodeName: s
  12:  Var Pass:      s = [taint_src, "b", "c"]
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/list_no_solver_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      taint_sink(s[0])

------------- 68: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/list_no_solver_003_T.py
Line 15: taint_sink(s)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/list_no_solver_003_T.py","functionName":"list_no_solver_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/list_no_solver_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def list_no_solver_003_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/list_no_solver_003_T.py
  AffectedNodeName: s
  13:  Var Pass:      s = [taint_src, "b", "c"]
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/list_no_solver_003_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(s)

------------- 69: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_001_T.py
Line 16: taint_sink(my_map.get(key1))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_001_T.py","functionName":"map_field_sensitive_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def map_field_sensitive_001_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_001_T.py
  14:  Var Pass:      my_map['key1'] = taint_src  # 设置键值对，污染源绑定到 'key1'
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(my_map.get('key1'))  # 通过 get 方法访问 'key1' 的值（污染源）

------------- 70: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_002_F.py
Line 16: taint_sink(my_map.get(key2))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_002_F.py","functionName":"map_field_sensitive_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def map_field_sensitive_002_F(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_002_F.py
  14:  Var Pass:      my_map['key1'] = taint_src  # 设置键值对，污染源绑定到 'key1'
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_002_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(my_map.get('key2'))  # 通过 get 方法访问 'key2' 的值（非污染源）

------------- 71: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_003_F.py
Line 16: taint_sink(my_map.get(taint_src))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_003_F.py","functionName":"map_field_sensitive_003_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_003_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def map_field_sensitive_003_F(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_003_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(my_map.get(taint_src))  # 通过污染的键获取值（值本身是干净的）

------------- 72: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_004_T.py
Line 18: taint_sink(my_map.get(key2))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_004_T.py","functionName":"map_field_sensitive_004_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_004_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def map_field_sensitive_004_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_004_T.py
  14:  Var Pass:      my_map['key1'] = taint_src  # 污染源绑定到 'key1'
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_004_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(my_map.get('key2'))  # 通过 'key2' 获取污染源

------------- 73: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_005_F.py
Line 18: taint_sink(my_map.get(key1))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_005_F.py","functionName":"map_field_sensitive_005_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_005_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def map_field_sensitive_005_F(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_005_F.py
  14:  Var Pass:      my_map['key1'] = taint_src  # 污染源绑定到 'key1'
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_005_F.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(my_map.get('key1'))  # 通过 'key1' 获取值（已删除，返回 None）

------------- 74: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_006_T.py
Line 15: taint_sink(list(my_map.values()))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_006_T.py","functionName":"map_field_sensitive_006_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_006_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def map_field_sensitive_006_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_006_T.py
  13:  Var Pass:      my_map['key1'] = taint_src  # 污染源绑定到 'key1'
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_006_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(list(my_map.values()))  # 传递所有值的列表（包含污染源）

------------- 75: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_009_F.py
Line 15: taint_sink(list(my_map.keys()))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_009_F.py","functionName":"map_field_sensitive_009_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_009_F.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def map_field_sensitive_009_F(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_009_F.py
  13:  Var Pass:      my_map['key1'] = taint_src  # 键 'key1' 是干净的，但值被污染
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_009_F.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(list(my_map.keys()))  # 传递所有键的列表（键均为干净）

------------- 76: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_010_T.py
Line 20: taint_sink(c.taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_010_T.py","functionName":"map_field_sensitive_010_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_010_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def map_field_sensitive_010_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_010_T.py
  AffectedNodeName: arr
  12:  Var Pass:      arr = {
  13:  Var Pass:          'a': '_',
  14:  Var Pass:          'b': '_',
  15:  Var Pass:          'c': {'taint_src': taint_src, 'd': 'a'}
  16:  Var Pass:      }
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_010_T.py
  AffectedNodeName: c
  19:  Var Pass:      c = arr['c']
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_010_T.py
  AffectedNodeName: taint_sink
  20:  SINK:      taint_sink(c['taint_src'])  # 传递嵌套字典中的 taint_src

------------- 77: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_012_T.py
Line 19: taint_sink({with(params)}.id)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_012_T.py","functionName":"map_field_sensitive_012_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_012_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def map_field_sensitive_012_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_012_T.py
  AffectedNodeName: params
  13:  Var Pass:      params = {
  14:  Var Pass:          'name': 'Tony',
  15:  Var Pass:          'age': '12',
  16:  Var Pass:          'id': taint_src,
  17:  Var Pass:      }
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_012_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink({**params}['id'])  # 展开 params 并取 id 属性

------------- 78: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_014_T.py
Line 23: taint_sink(new_params.id)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_014_T.py","functionName":"map_field_sensitive_014_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_014_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def map_field_sensitive_014_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_014_T.py
  AffectedNodeName: params
  13:  Var Pass:      params = {
  14:  Var Pass:          'name': 'Tony',
  15:  Var Pass:          'age': '12',
  16:  Var Pass:          'id': taint_src,
  17:  Var Pass:      }
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_014_T.py
  AffectedNodeName: new_params
  19:  Var Pass:      new_params = {
  20:  Var Pass:          'score': 100,
  21:  Var Pass:          **params,
  22:  Var Pass:      }
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/map_field_sensitive_014_T.py
  AffectedNodeName: taint_sink
  23:  SINK:      taint_sink(new_params['id'])

------------- 79: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/rest_parameter_no_solver_001_T.py
Line 17: taint_sink(args.1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/rest_parameter_no_solver_001_T.py","functionName":"rest_parameter_no_solver_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/rest_parameter_no_solver_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def rest_parameter_no_solver_001_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/rest_parameter_no_solver_001_T.py
  AffectedNodeName: collectArgs
  13:  CALL:      collectArgs("prefix", taint_src, "suffix")
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/rest_parameter_no_solver_001_T.py
  AffectedNodeName: args
  16:  ARG PASS:  def collectArgs(*args):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/rest_parameter_no_solver_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(args[1])

------------- 80: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_003_T.py
Line 16: taint_sink(rest.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_003_T.py","functionName":"spread_operator_no_solver_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def spread_operator_no_solver_003_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_003_T.py
  AffectedNodeName: foo
  13:  Var Pass:      foo = taint_src
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_003_T.py
  15:  Var Pass:      r1, r2, *rest = [123, 456, foo, bar]
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_003_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(rest[0])

------------- 81: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_004_F.py
Line 15: taint_sink(rest.1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_004_F.py","functionName":"spread_operator_no_solver_004_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_004_F.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def spread_operator_no_solver_004_F(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_004_F.py
  AffectedNodeName: foo
  12:  Var Pass:      foo = taint_src
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_004_F.py
  14:  Var Pass:      r1, r2, *rest = [123, 456, foo, bar]
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_no_solver/spread_operator_no_solver_004_F.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(rest[1])

------------- 82: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_001_T.py
Line 19: taint_sink(s.1+1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_001_T.py","functionName":"array_solver_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def array_solver_001_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_001_T.py
  AffectedNodeName: char_array
  16:  Var Pass:      char_array = array.array('u', taint_src)  # 每个字符作为独立元素
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_001_T.py
  AffectedNodeName: s
  18:  Var Pass:      s = array.array('u', ['c', 'b', char_array[0]])  # 仅保留首字符
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_001_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(s[1 + 1])

------------- 83: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_002_F.py
Line 19: taint_sink(s.0+1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_002_F.py","functionName":"array_solver_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_002_F.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def array_solver_002_F(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_002_F.py
  AffectedNodeName: char_array
  16:  Var Pass:      char_array = array.array('u', taint_src)  # 每个字符作为独立元素
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_002_F.py
  AffectedNodeName: s
  18:  Var Pass:      s = array.array('u', ['c', 'b', char_array[0]])  # 仅保留首字符
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_002_F.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(s[0 + 1])

------------- 84: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_003_T.py
Line 20: taint_sink(s.length-1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_003_T.py","functionName":"array_solver_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_003_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def array_solver_003_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_003_T.py
  AffectedNodeName: char_array
  16:  Var Pass:      char_array = array.array('u', taint_src)  # 每个字符作为独立元素
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_003_T.py
  AffectedNodeName: s
  18:  Var Pass:      s = array.array('u', ['c', 'b', char_array[0]])  # 仅保留首字符
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_003_T.py
  AffectedNodeName: length
  19:  Var Pass:      length = len(s)
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_003_T.py
  AffectedNodeName: taint_sink
  20:  SINK:      taint_sink(s[length - 1])

------------- 85: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_004_F.py
Line 20: taint_sink(s.length-2)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_004_F.py","functionName":"array_solver_004_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_004_F.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def array_solver_004_F(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_004_F.py
  AffectedNodeName: char_array
  16:  Var Pass:      char_array = array.array('u', taint_src)  # 每个字符作为独立元素
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_004_F.py
  AffectedNodeName: s
  18:  Var Pass:      s = array.array('u', ['c', 'b', char_array[0]])  # 仅保留首字符
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_004_F.py
  AffectedNodeName: length
  19:  Var Pass:      length = len(s)
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/array_solver_004_F.py
  AffectedNodeName: taint_sink
  20:  SINK:      taint_sink(s[length - 2])

------------- 86: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_003_T.py
Line 15: taint_sink(s.length-3)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_003_T.py","functionName":"list_solver_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def list_solver_003_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_003_T.py
  AffectedNodeName: s
  13:  Var Pass:      s = ["a", "b", taint_src, "c", "d"]
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_003_T.py
  AffectedNodeName: length
  14:  Var Pass:      length = len(s)
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_003_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(s[length - 3])  # 等价于索引2（污染）

------------- 87: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_004_F.py
Line 15: taint_sink(s.length-2)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_004_F.py","functionName":"list_solver_004_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_004_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def list_solver_004_F(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_004_F.py
  AffectedNodeName: s
  13:  Var Pass:      s = ["a", "b", taint_src, "c", "d"]
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_004_F.py
  AffectedNodeName: length
  14:  Var Pass:      length = len(s)
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/list_solver_004_F.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(s[length - 2])  # 等价于索引3（未污染）

------------- 88: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_003_T.py
Line 20: taint_sink(d.length-1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_003_T.py","functionName":"map_solver_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_003_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def map_solver_003_T(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_003_T.py
  AffectedNodeName: d
  14:  Var Pass:      d = {
  15:  Var Pass:          0: "a",
  16:  Var Pass:          1: "b",
  17:  Var Pass:          2: taint_src,  # 将污染源放在键为2的位置
  18:  Var Pass:      }
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_003_T.py
  AffectedNodeName: length
  19:  Var Pass:      length = len(d)
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_003_T.py
  AffectedNodeName: taint_sink
  20:  SINK:      taint_sink(d[length - 1])  # 访问键为2的值并传给taint_sink函数

------------- 89: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_004_F.py
Line 20: taint_sink(d.length-2)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_004_F.py","functionName":"map_solver_004_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_004_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def map_solver_004_F(taint_src):
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_004_F.py
  AffectedNodeName: d
  14:  Var Pass:      d = {
  15:  Var Pass:          0: "a",
  16:  Var Pass:          1: "b",
  17:  Var Pass:          2: taint_src,  # 将污染源放在键为2的位置
  18:  Var Pass:      }
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_004_F.py
  AffectedNodeName: length
  19:  Var Pass:      length = len(d)
 /case/accuracy/field_sensitive/one_dimensional_collection/numeric_index_state_solver/map_solver_004_F.py
  AffectedNodeName: taint_sink
  20:  SINK:      taint_sink(d[length - 2])  # 访问键为2的值并传给taint_sink函数

------------- 90: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/asynchronous_tracing/async_for/async_for_001_T.py
Line 22: taint_sink(item)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/asynchronous_tracing/async_for/async_for_001_T.py","functionName":"async_for_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/asynchronous_tracing/async_for/async_for_001_T.py
  AffectedNodeName: taint_src
  15:  SOURCE:  def async_for_001_T(taint_src):
 /case/completeness/single_app_tracing/asynchronous_tracing/async_for/async_for_001_T.py
  AffectedNodeName: [return value]
  17:  Return Value:          yield taint_src
 /case/completeness/single_app_tracing/asynchronous_tracing/async_for/async_for_001_T.py
  AffectedNodeName: [return value]
  18:  Return Value:          yield "suffix"
 /case/completeness/single_app_tracing/asynchronous_tracing/async_for/async_for_001_T.py
  AffectedNodeName: async_generator
  21:  CALL RETURN:         async for item in async_generator():  # 使用 AsyncFor 进行异步迭代
 /case/completeness/single_app_tracing/asynchronous_tracing/async_for/async_for_001_T.py
  AffectedNodeName: taint_sink
  22:  SINK:              taint_sink(item)

------------- 91: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_001_T.py
Line 16: taint_sink(data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_001_T.py","functionName":"asynchronous_await_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  async def asynchronous_await_001_T(taint_src):
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_001_T.py
  AffectedNodeName: process
  15:  CALL:      data = await process(taint_src)
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_001_T.py
  AffectedNodeName: taint_src
  19:  ARG PASS:  async def process(taint_src):
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_001_T.py
  AffectedNodeName: [return value]
  21:  Return Value:      return taint_src
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_001_T.py
  AffectedNodeName: process
  15:  CALL RETURN:     data = await process(taint_src)
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_001_T.py
  AffectedNodeName: data
  15:  Var Pass:      data = await process(taint_src)
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(data)

------------- 92: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_005_T.py
Line 23: taint_sink(taint)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_005_T.py","functionName":"asynchronous_await_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_005_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  async def asynchronous_await_005_T(taint_src):
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_005_T.py
  AffectedNodeName: download_task
  15:  CALL:      tasks = [download_task(semaphore, taint_src) for _ in range(6)]
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_005_T.py
  AffectedNodeName: taint
  20:  ARG PASS:  async def download_task(sem, taint):
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_005_T.py
  AffectedNodeName: taint_sink
  23:  SINK:          taint_sink(taint)  # 确保仅2个任务同时运行

------------- 93: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_009_T.py
Line 23: taint_sink(data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_009_T.py","functionName":"asynchronous_await_009_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_009_T.py
  AffectedNodeName: taint_src
  15:  SOURCE:  async def asynchronous_await_009_T(taint_src):
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_009_T.py
  AffectedNodeName: process
  21:  CALL:      coro: Coroutine[None, None, str] = process(taint_src)
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_009_T.py
  AffectedNodeName: taint_src
  16:  ARG PASS:      async def process(taint_src) -> str:
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_009_T.py
  AffectedNodeName: [return value]
  18:  Return Value:            return taint_src
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_009_T.py
  AffectedNodeName: process
  21:  CALL RETURN:     coro: Coroutine[None, None, str] = process(taint_src)
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_009_T.py
  AffectedNodeName: coro
  21:  Var Pass:      coro: Coroutine[None, None, str] = process(taint_src)
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_009_T.py
  AffectedNodeName: data
  22:  Var Pass:      data = await coro
 /case/completeness/single_app_tracing/asynchronous_tracing/promise_callback_await/asynchronous_await_009_T.py
  AffectedNodeName: taint_sink
  23:  SINK:      taint_sink(data)

------------- 94: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
Line 26: taint_sink(obj.data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py","functionName":"cross_class_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def cross_class_001_T(taint_src):
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: __init__
  25:  CALL:      obj = B(taint_src)
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: taint_src
  21:  ARG PASS:          def __init__(self, taint_src):
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: __init__
  22:  CALL:              a_instance = A(taint_src)
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: taint_src
  14:  ARG PASS:          def __init__(self, taint_src):
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  15:  Var Pass:              self.data = taint_src
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: a_instance
  22:  Var Pass:              a_instance = A(taint_src)
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: get_data
  23:  CALL:              self.data = a_instance.get_data()
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: a_instance
  23:  ARG PASS:              self.data = a_instance.get_data()
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: [return value]
  18:  Return Value:              return self.data
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: get_data
  23:  CALL RETURN:             self.data = a_instance.get_data()
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  23:  Var Pass:              self.data = a_instance.get_data()
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: obj
  25:  Var Pass:      obj = B(taint_src)
 /case/completeness/single_app_tracing/class/complex_object/cross_class_001_T.py
  AffectedNodeName: taint_sink
  26:  SINK:      taint_sink(obj.data)

------------- 95: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/class/complex_object/cross_class_003_T.py
Line 31: taint_sink(a.topData.data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/class/complex_object/cross_class_003_T.py","functionName":"cross_class_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/class/complex_object/cross_class_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def cross_class_003_T(taint_src):
 /case/completeness/single_app_tracing/class/complex_object/cross_class_003_T.py
  AffectedNodeName: set_data
  30:  CALL:      b.set_data(taint_src)
 /case/completeness/single_app_tracing/class/complex_object/cross_class_003_T.py
  AffectedNodeName: data
  25:  ARG PASS:          def set_data(self, data):
 /case/completeness/single_app_tracing/class/complex_object/cross_class_003_T.py
  26:  Var Pass:              self.data = data
 /case/completeness/single_app_tracing/class/complex_object/cross_class_003_T.py
  AffectedNodeName: taint_sink
  31:  SINK:      taint_sink(a.topData.data)

------------- 96: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
Line 28: taint_sink(obj.get_child_data())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py","functionName":"inheritance_class_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def inheritance_class_001_T(taint_src):
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  AffectedNodeName: __init__
  27:  CALL:      obj = Child(taint_src)
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  AffectedNodeName: data
  21:  ARG PASS:          def __init__(self, data):
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  AffectedNodeName: __init__
  22:  CALL:              super().__init__(data)
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  AffectedNodeName: data
  14:  ARG PASS:          def __init__(self, data):
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  15:  Var Pass:              self.data = data
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  AffectedNodeName: obj
  27:  Var Pass:      obj = Child(taint_src)
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  AffectedNodeName: get_child_data
  28:  CALL:      taint_sink(obj.get_child_data())  # 通过子类方法访问父类属性
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  AffectedNodeName: obj
  28:  ARG PASS:      taint_sink(obj.get_child_data())  # 通过子类方法访问父类属性
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  AffectedNodeName: [return value]
  25:  Return Value:              return self.data
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  AffectedNodeName: get_child_data
  28:  CALL RETURN:     taint_sink(obj.get_child_data())  # 通过子类方法访问父类属性
 /case/completeness/single_app_tracing/class/complex_object/inheritance_class_001_T.py
  AffectedNodeName: taint_sink
  28:  SINK:      taint_sink(obj.get_child_data())  # 通过子类方法访问父类属性

------------- 97: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/class/simple_object/simple_object_001_T.py
Line 18: taint_sink(obj.data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/class/simple_object/simple_object_001_T.py","functionName":"simple_object_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/class/simple_object/simple_object_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def simple_object_001_T(taint_src):
 /case/completeness/single_app_tracing/class/simple_object/simple_object_001_T.py
  AffectedNodeName: __init__
  17:  CALL:      obj = A(taint_src)
 /case/completeness/single_app_tracing/class/simple_object/simple_object_001_T.py
  AffectedNodeName: data
  14:  ARG PASS:          def __init__(self, data):
 /case/completeness/single_app_tracing/class/simple_object/simple_object_001_T.py
  15:  Var Pass:              self.data = data
 /case/completeness/single_app_tracing/class/simple_object/simple_object_001_T.py
  AffectedNodeName: obj
  17:  Var Pass:      obj = A(taint_src)
 /case/completeness/single_app_tracing/class/simple_object/simple_object_001_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(obj.data)

------------- 98: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/class/simple_object/simple_object_003_T.py
Line 22: taint_sink(person.name)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/class/simple_object/simple_object_003_T.py","functionName":"simple_object_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/class/simple_object/simple_object_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def simple_object_003_T(taint_src):
 /case/completeness/single_app_tracing/class/simple_object/simple_object_003_T.py
  16:  Var Pass:      Person.name = taint_src
 /case/completeness/single_app_tracing/class/simple_object/simple_object_003_T.py
  AffectedNodeName: person
  19:  Var Pass:      person = Person()
 /case/completeness/single_app_tracing/class/simple_object/simple_object_003_T.py
  AffectedNodeName: taint_sink
  22:  SINK:      taint_sink(person.name)

------------- 99: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py
Line 26: taint_sink(int_box.get_content())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py","functionName":"simple_object_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py
  AffectedNodeName: taint_src
  23:  SOURCE:  def simple_object_005_T(taint_src):
 /case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py
  AffectedNodeName: __init__
  25:  CALL:      int_box = Box(taint_src)
 /case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py
  AffectedNodeName: content
  16:  ARG PASS:      def __init__(self, content: T):
 /case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py
  17:  Var Pass:          self.content = content
 /case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py
  AffectedNodeName: int_box
  25:  Var Pass:      int_box = Box(taint_src)
 /case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py
  AffectedNodeName: get_content
  26:  CALL:      taint_sink(int_box.get_content())
 /case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py
  AffectedNodeName: int_box
  26:  ARG PASS:      taint_sink(int_box.get_content())
 /case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py
  AffectedNodeName: [return value]
  20:  Return Value:          return self.content
 /case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py
  AffectedNodeName: get_content
  26:  CALL RETURN:     taint_sink(int_box.get_content())
 /case/completeness/single_app_tracing/class/simple_object/simple_object_005_T.py
  AffectedNodeName: taint_sink
  26:  SINK:      taint_sink(int_box.get_content())

------------- 100: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/assert/assert_001_T.py
Line 22: taint_sink(arr.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/assert/assert_001_T.py","functionName":"assert_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/assert/assert_001_T.py
  AffectedNodeName: taint_src
  15:  SOURCE:  def assert_001_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/assert/assert_001_T.py
  AffectedNodeName: arr
  17:  Var Pass:      arr = np.array([taint_src, "SAFE"])
 /case/completeness/single_app_tracing/control_flow/assert/assert_001_T.py
  AffectedNodeName: taint_sink
  22:  SINK:      taint_sink(arr[0])

------------- 101: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/assert/assert_002_F.py
Line 22: taint_sink(arr.1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/assert/assert_002_F.py","functionName":"assert_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/assert/assert_002_F.py
  AffectedNodeName: taint_src
  15:  SOURCE:  def assert_002_F(taint_src):
 /case/completeness/single_app_tracing/control_flow/assert/assert_002_F.py
  AffectedNodeName: arr
  17:  Var Pass:      arr = np.array([taint_src, "SAFE"])
 /case/completeness/single_app_tracing/control_flow/assert/assert_002_F.py
  AffectedNodeName: taint_sink
  22:  SINK:      taint_sink(arr[1])

------------- 102: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_if_001_T.py
Line 14: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_if_001_T.py","functionName":"conditional_if_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_if_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def conditional_if_001_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_if_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:          taint_sink(taint_src)

------------- 103: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_if_003_T.py
Line 16: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_if_003_T.py","functionName":"conditional_if_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_if_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def conditional_if_003_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_if_003_T.py
  AffectedNodeName: taint_sink
  16:  SINK:          taint_sink(taint_src)

------------- 104: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_match_001_T.py
Line 17: taint_sink(value)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_match_001_T.py","functionName":"conditional_match_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_match_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def conditional_match_001_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_match_001_T.py
  AffectedNodeName: value
  14:  Var Pass:      value = taint_src
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_match_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:              taint_sink(value)

------------- 105: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_ternary_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_ternary_001_T.py","functionName":"conditional_ternary_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_ternary_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def conditional_ternary_001_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_ternary_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = "_" if False else taint_src  # 条件为假时返回污点
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_ternary_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 106: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_ternary_002_F.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_ternary_002_F.py","functionName":"conditional_ternary_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_ternary_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def conditional_ternary_002_F(taint_src):
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_ternary_002_F.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src if False else "_"  # 条件为假时未使用污点
 /case/completeness/single_app_tracing/control_flow/conditional_stmt/conditional_ternary_002_F.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 107: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/loop_stmt/all_001_T.py
Line 13: taint_sink(item)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/loop_stmt/all_001_T.py","functionName":"all_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/loop_stmt/all_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def all_001_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/loop_stmt/all_001_T.py
  AffectedNodeName: arr
  12:  Var Pass:      arr = ['a', 'b', taint_src]
 /case/completeness/single_app_tracing/control_flow/loop_stmt/all_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      all(taint_sink(item) for item in arr)

------------- 108: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/loop_stmt/any_001_T.py
Line 13: taint_sink(item)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/loop_stmt/any_001_T.py","functionName":"any_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/loop_stmt/any_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def any_001_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/loop_stmt/any_001_T.py
  AffectedNodeName: arr
  12:  Var Pass:      arr = ['a', 'b', taint_src]
 /case/completeness/single_app_tracing/control_flow/loop_stmt/any_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      any(taint_sink(item) for item in arr)

------------- 109: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/loop_stmt/for_body_002_F.py
Line 16: taint_sink(res)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/loop_stmt/for_body_002_F.py","functionName":"for_body_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/loop_stmt/for_body_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def for_body_002_F(taint_src):
 /case/completeness/single_app_tracing/control_flow/loop_stmt/for_body_002_F.py
  AffectedNodeName: res
  13:  Var Pass:      res = taint_src
 /case/completeness/single_app_tracing/control_flow/loop_stmt/for_body_002_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(res)

------------- 110: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/loop_stmt/forin_body_001_T.py
Line 19: taint_sink(res)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/loop_stmt/forin_body_001_T.py","functionName":"forin_body_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/loop_stmt/forin_body_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def forin_body_001_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/loop_stmt/forin_body_001_T.py
  AffectedNodeName: obj
  13:  Var Pass:      obj = {'key1': 'value1', 'key2': taint_src}
 /case/completeness/single_app_tracing/control_flow/loop_stmt/forin_body_001_T.py
  AffectedNodeName: res
  17:  Var Pass:         res += obj[key]
 /case/completeness/single_app_tracing/control_flow/loop_stmt/forin_body_001_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(res)

------------- 111: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/loop_stmt/nested_loop_001_T.py
Line 17: taint_sink(res)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/loop_stmt/nested_loop_001_T.py","functionName":"nested_loop_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/loop_stmt/nested_loop_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def nested_loop_001_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/loop_stmt/nested_loop_001_T.py
  AffectedNodeName: res
  16:  Var Pass:             res += taint_src
 /case/completeness/single_app_tracing/control_flow/loop_stmt/nested_loop_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(res)

------------- 112: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/loop_stmt/nested_loop_002_F.py
Line 18: taint_sink(res)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/loop_stmt/nested_loop_002_F.py","functionName":"nested_loop_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/loop_stmt/nested_loop_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def nested_loop_002_F(taint_src):
 /case/completeness/single_app_tracing/control_flow/loop_stmt/nested_loop_002_F.py
  AffectedNodeName: res
  17:  Var Pass:             res += taint_src
 /case/completeness/single_app_tracing/control_flow/loop_stmt/nested_loop_002_F.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(res)

------------- 113: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/loop_stmt/while_body_001_T.py
Line 19: taint_sink(res)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/loop_stmt/while_body_001_T.py","functionName":"while_body_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_body_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def while_body_001_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_body_001_T.py
  AffectedNodeName: res
  16:  Var Pass:         res += taint_src
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_body_001_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(res)

------------- 114: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/loop_stmt/while_break_001_T.py
Line 16: taint_sink(res)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/loop_stmt/while_break_001_T.py","functionName":"while_break_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_break_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def while_break_001_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_break_001_T.py
  AffectedNodeName: res
  15:  Var Pass:         res += taint_src
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_break_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:          taint_sink(res)

------------- 115: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/loop_stmt/while_else_001_T.py
Line 21: taint_sink(res)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/loop_stmt/while_else_001_T.py","functionName":"while_else_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_else_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def while_else_001_T(taint_src):
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_else_001_T.py
  AffectedNodeName: res
  14:  Var Pass:      res = taint_src
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_else_001_T.py
  AffectedNodeName: taint_sink
  21:  SINK:      taint_sink(res)

------------- 116: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/control_flow/loop_stmt/while_else_002_F.py
Line 21: taint_sink(res)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/control_flow/loop_stmt/while_else_002_F.py","functionName":"while_else_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_else_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def while_else_002_F(taint_src):
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_else_002_F.py
  AffectedNodeName: res
  14:  Var Pass:      res = taint_src
 /case/completeness/single_app_tracing/control_flow/loop_stmt/while_else_002_F.py
  AffectedNodeName: taint_sink
  21:  SINK:      taint_sink(res)

------------- 117: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/any/type_annotation_any_001_T.py
Line 21: taint_sink(d)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/any/type_annotation_any_001_T.py","functionName":"type_annotation_any_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/any/type_annotation_any_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def type_annotation_any_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/any/type_annotation_any_001_T.py
  AffectedNodeName: a
  14:  Var Pass:      a: str = taint_src
 /case/completeness/single_app_tracing/datatype/any/type_annotation_any_001_T.py
  AffectedNodeName: d
  20:  Var Pass:      d = a
 /case/completeness/single_app_tracing/datatype/any/type_annotation_any_001_T.py
  AffectedNodeName: taint_sink
  21:  SINK:      taint_sink(d)

------------- 118: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/array/array_001_T.py
Line 17: taint_sink(s)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/array/array_001_T.py","functionName":"array_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/array/array_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def array_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/array/array_001_T.py
  AffectedNodeName: char_array
  15:  Var Pass:      char_array = array.array('u', taint_src)  # 每个字符作为独立元素
 /case/completeness/single_app_tracing/datatype/array/array_001_T.py
  AffectedNodeName: s
  16:  Var Pass:      s = array.array('u', [char_array[0], 'b', 'c'])
 /case/completeness/single_app_tracing/datatype/array/array_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(s)

------------- 119: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/array/extslice_001_T.py
Line 19: taint_sink(arr.([0 : 2 ], 2).0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/array/extslice_001_T.py","functionName":"extslice_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/array/extslice_001_T.py
  AffectedNodeName: taint_src
  15:  SOURCE:  def extslice_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/array/extslice_001_T.py
  AffectedNodeName: arr
  17:  Var Pass:          arr = np.array([[1, 2, taint_src], [4, 5, 6]])
 /case/completeness/single_app_tracing/datatype/array/extslice_001_T.py
  AffectedNodeName: taint_sink
  19:  SINK:          taint_sink(arr[0:2, 2][0])  # 假设我们试图从数组中提取可能存在污染的数据

------------- 120: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/array/extslice_002_F.py
Line 19: taint_sink(arr.([0 : 2 ], 2).1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/array/extslice_002_F.py","functionName":"extslice_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/array/extslice_002_F.py
  AffectedNodeName: taint_src
  15:  SOURCE:  def extslice_002_F(taint_src):
 /case/completeness/single_app_tracing/datatype/array/extslice_002_F.py
  AffectedNodeName: arr
  17:  Var Pass:          arr = np.array([[1, 2, taint_src], [4, 5, 6]])
 /case/completeness/single_app_tracing/datatype/array/extslice_002_F.py
  AffectedNodeName: taint_sink
  19:  SINK:          taint_sink(arr[0:2, 2][1])  # 假设我们试图从数组中提取可能存在污染的数据

------------- 121: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/array/numpy_array_001_T.py
Line 17: taint_sink(arr)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/array/numpy_array_001_T.py","functionName":"numpy_array_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/array/numpy_array_001_T.py
  AffectedNodeName: taint_src
  15:  SOURCE:  def numpy_array_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/array/numpy_array_001_T.py
  AffectedNodeName: arr
  16:  Var Pass:      arr = np.array([taint_src, 111])
 /case/completeness/single_app_tracing/datatype/array/numpy_array_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(arr)

------------- 122: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/bytearray/bytearray_001_T.py
Line 17: taint_sink(mutable_byte_data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/bytearray/bytearray_001_T.py","functionName":"bytearray_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/bytearray/bytearray_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def bytearray_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/bytearray/bytearray_001_T.py
  AffectedNodeName: mutable_byte_data
  16:  Var Pass:      mutable_byte_data = bytearray(taint_src, 'utf-8')
 /case/completeness/single_app_tracing/datatype/bytearray/bytearray_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(mutable_byte_data)  # 将修改后的字节序列传递给 taint_sink

------------- 123: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/bytes/bytes_003_T.py
Line 17: taint_sink(byte_data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/bytes/bytes_003_T.py","functionName":"bytes_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/bytes/bytes_003_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def bytes_003_T(taint_src):
 /case/completeness/single_app_tracing/datatype/bytes/bytes_003_T.py
  AffectedNodeName: byte_data
  16:  Var Pass:      byte_data = bytes(taint_src, 'utf-8')
 /case/completeness/single_app_tracing/datatype/bytes/bytes_003_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(byte_data)  # 将字节序列传递给 taint_sink

------------- 124: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/bytes/bytes_005_T.py
Line 18: taint_sink(first_byte)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/bytes/bytes_005_T.py","functionName":"bytes_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/bytes/bytes_005_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def bytes_005_T(taint_src):
 /case/completeness/single_app_tracing/datatype/bytes/bytes_005_T.py
  AffectedNodeName: byte_data
  16:  Var Pass:      byte_data = bytes(taint_src, 'utf-8')
 /case/completeness/single_app_tracing/datatype/bytes/bytes_005_T.py
  AffectedNodeName: first_byte
  17:  Var Pass:      first_byte = byte_data[0]
 /case/completeness/single_app_tracing/datatype/bytes/bytes_005_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(first_byte)  # 将第一个字节传递给 taint_sink

------------- 125: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/bytes/bytes_007_T.py
Line 18: taint_sink(sliced_data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/bytes/bytes_007_T.py","functionName":"bytes_007_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/bytes/bytes_007_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def bytes_007_T(taint_src):
 /case/completeness/single_app_tracing/datatype/bytes/bytes_007_T.py
  AffectedNodeName: byte_data
  16:  Var Pass:      byte_data = bytes(taint_src, 'utf-8')
 /case/completeness/single_app_tracing/datatype/bytes/bytes_007_T.py
  AffectedNodeName: sliced_data
  17:  Var Pass:      sliced_data = byte_data[1:5]
 /case/completeness/single_app_tracing/datatype/bytes/bytes_007_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(sliced_data)  # 将切片结果传递给 taint_sink

------------- 126: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/bytes/bytes_009_T.py
Line 19: taint_sink(concatenated_data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/bytes/bytes_009_T.py","functionName":"bytes_009_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/bytes/bytes_009_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def bytes_009_T(taint_src):
 /case/completeness/single_app_tracing/datatype/bytes/bytes_009_T.py
  AffectedNodeName: byte_data1
  16:  Var Pass:      byte_data1 = bytes(taint_src, 'utf-8')
 /case/completeness/single_app_tracing/datatype/bytes/bytes_009_T.py
  AffectedNodeName: concatenated_data
  18:  Var Pass:      concatenated_data = byte_data1 + byte_data2
 /case/completeness/single_app_tracing/datatype/bytes/bytes_009_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(concatenated_data)  # 将拼接结果传递给 taint_sink

------------- 127: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/bytes/bytes_011_T.py
Line 18: taint_sink(decoded_data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/bytes/bytes_011_T.py","functionName":"bytes_011_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/bytes/bytes_011_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def bytes_011_T(taint_src):
 /case/completeness/single_app_tracing/datatype/bytes/bytes_011_T.py
  AffectedNodeName: byte_data
  16:  Var Pass:      byte_data = bytes(taint_src, 'utf-8')
 /case/completeness/single_app_tracing/datatype/bytes/bytes_011_T.py
  AffectedNodeName: decoded_data
  17:  Var Pass:      decoded_data = byte_data.decode('utf-8')
 /case/completeness/single_app_tracing/datatype/bytes/bytes_011_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(decoded_data)  # 将解码后的字符串传递给 taint_sink

------------- 128: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/bytes/bytes_013_T.py
Line 18: taint_sink(position)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/bytes/bytes_013_T.py","functionName":"bytes_013_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/bytes/bytes_013_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def bytes_013_T(taint_src):
 /case/completeness/single_app_tracing/datatype/bytes/bytes_013_T.py
  AffectedNodeName: byte_data
  16:  Var Pass:      byte_data = bytes(taint_src, 'utf-8')
 /case/completeness/single_app_tracing/datatype/bytes/bytes_013_T.py
  AffectedNodeName: position
  17:  Var Pass:      position = byte_data.find(b"src")
 /case/completeness/single_app_tracing/datatype/bytes/bytes_013_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(position)  # 将查找结果传递给 taint_sink

------------- 129: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/collections/set_001_T.py
Line 15: taint_sink(s)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/collections/set_001_T.py","functionName":"set_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/collections/set_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def set_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/collections/set_001_T.py
  AffectedNodeName: s
  14:  Var Pass:      s = set(taint_src)
 /case/completeness/single_app_tracing/datatype/collections/set_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(s)

------------- 130: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/collections/set_005_T.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/collections/set_005_T.py","functionName":"set_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/collections/set_005_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def set_005_T(taint_src):
 /case/completeness/single_app_tracing/datatype/collections/set_005_T.py
  AffectedNodeName: set2
  13:  Var Pass:      set2 = {taint_src, 'b'}
 /case/completeness/single_app_tracing/datatype/collections/set_005_T.py
  AffectedNodeName: result
  14:  Var Pass:      result = set1.union(set2)  # 并集包含污点
 /case/completeness/single_app_tracing/datatype/collections/set_005_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 131: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/collections/set_006_F.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/collections/set_006_F.py","functionName":"set_006_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/collections/set_006_F.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def set_006_F(taint_src):
 /case/completeness/single_app_tracing/datatype/collections/set_006_F.py
  AffectedNodeName: set1
  12:  Var Pass:      set1 = {taint_src, 'a', 'b'}
 /case/completeness/single_app_tracing/datatype/collections/set_006_F.py
  AffectedNodeName: result
  14:  Var Pass:      result = set1.intersection(set2)  # 交集包含污点
 /case/completeness/single_app_tracing/datatype/collections/set_006_F.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 132: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/collections/set_007_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/collections/set_007_T.py","functionName":"set_007_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/collections/set_007_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def set_007_T(taint_src):
 /case/completeness/single_app_tracing/datatype/collections/set_007_T.py
  AffectedNodeName: set1
  12:  Var Pass:      set1 = {taint_src, 'a'}
 /case/completeness/single_app_tracing/datatype/collections/set_007_T.py
  AffectedNodeName: result
  15:  Var Pass:      result = set1 - set2
 /case/completeness/single_app_tracing/datatype/collections/set_007_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 133: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/collections/set_008_F.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/collections/set_008_F.py","functionName":"set_008_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/collections/set_008_F.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def set_008_F(taint_src):
 /case/completeness/single_app_tracing/datatype/collections/set_008_F.py
  AffectedNodeName: set2
  13:  Var Pass:      set2 = {'a', taint_src}
 /case/completeness/single_app_tracing/datatype/collections/set_008_F.py
  AffectedNodeName: result
  15:  Var Pass:      result = set1 - set2
 /case/completeness/single_app_tracing/datatype/collections/set_008_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 134: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/customize/type_annotation_customize_001_T.py
Line 19: taint_sink(a.value)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/customize/type_annotation_customize_001_T.py","functionName":"type_annotation_customize_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/customize/type_annotation_customize_001_T.py
  AffectedNodeName: taint_src
  17:  SOURCE:  def type_annotation_customize_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/customize/type_annotation_customize_001_T.py
  AffectedNodeName: __init__
  18:  CALL:      a: MyClass = MyClass(taint_src) # 使用自定义类型注解，a的值必须是MyClass类的实例
 /case/completeness/single_app_tracing/datatype/customize/type_annotation_customize_001_T.py
  AffectedNodeName: value
  14:  ARG PASS:      def __init__(self, value):
 /case/completeness/single_app_tracing/datatype/customize/type_annotation_customize_001_T.py
  15:  Var Pass:          self.value = value
 /case/completeness/single_app_tracing/datatype/customize/type_annotation_customize_001_T.py
  AffectedNodeName: a
  18:  Var Pass:      a: MyClass = MyClass(taint_src) # 使用自定义类型注解，a的值必须是MyClass类的实例
 /case/completeness/single_app_tracing/datatype/customize/type_annotation_customize_001_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(a.value)

------------- 135: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/list/list_001_T.py
Line 14: taint_sink(s)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/list/list_001_T.py","functionName":"list_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/list/list_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def list_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/list/list_001_T.py
  AffectedNodeName: s
  13:  Var Pass:      s = [taint_src, 'b', 'c']
 /case/completeness/single_app_tracing/datatype/list/list_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(s)

------------- 136: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/list/list_003_T.py
Line 14: taint_sink(s)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/list/list_003_T.py","functionName":"list_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/list/list_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def list_003_T(taint_src):
 /case/completeness/single_app_tracing/datatype/list/list_003_T.py
  AffectedNodeName: s
  13:  Var Pass:      s = [[taint_src], ['b'], 'c']
 /case/completeness/single_app_tracing/datatype/list/list_003_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(s)

------------- 137: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/list/list_005_T.py
Line 15: taint_sink(s)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/list/list_005_T.py","functionName":"list_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/list/list_005_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def list_005_T(taint_src):
 /case/completeness/single_app_tracing/datatype/list/list_005_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(s)

------------- 138: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/list/list_007_T.py
Line 17: taint_sink(l.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/list/list_007_T.py","functionName":"list_007_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/list/list_007_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def list_007_T(taint_src):
 /case/completeness/single_app_tracing/datatype/list/list_007_T.py
  AffectedNodeName: l
  16:  Var Pass:      l: List[str] = [taint_src,"_"]
 /case/completeness/single_app_tracing/datatype/list/list_007_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(l[0])

------------- 139: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/list/list_009_T.py
Line 16: taint_sink(items.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/list/list_009_T.py","functionName":"list_009_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/list/list_009_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def list_009_T(taint_src):
 /case/completeness/single_app_tracing/datatype/list/list_009_T.py
  AffectedNodeName: fruits
  18:  Var Pass:      fruits = [taint_src, "banana", "cherry"]
 /case/completeness/single_app_tracing/datatype/list/list_009_T.py
  AffectedNodeName: process_items
  19:  CALL:      process_items(fruits)
 /case/completeness/single_app_tracing/datatype/list/list_009_T.py
  AffectedNodeName: items
  15:  ARG PASS:      def process_items(items: Sequence[str]) -> None:
 /case/completeness/single_app_tracing/datatype/list/list_009_T.py
  AffectedNodeName: taint_sink
  16:  SINK:          taint_sink(items[0])

------------- 140: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/map/map_001_T.py
Line 15: taint_sink(m)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/map/map_001_T.py","functionName":"map_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/map/map_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def map_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/map/map_001_T.py
  14:  Var Pass:      m['key1'] = taint_src
 /case/completeness/single_app_tracing/datatype/map/map_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(m)

------------- 141: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/map/map_006_F.py
Line 18: taint_sink(m)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/map/map_006_F.py","functionName":"map_006_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/map/map_006_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def map_006_F(taint_src):
 /case/completeness/single_app_tracing/datatype/map/map_006_F.py
  AffectedNodeName: m
  14:  Var Pass:      m = {"key": taint_src}
 /case/completeness/single_app_tracing/datatype/map/map_006_F.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(m)  # 传递更新后的污染字典

------------- 142: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/map/map_007_T.py
Line 18: taint_sink(m)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/map/map_007_T.py","functionName":"map_007_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/map/map_007_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def map_007_T(taint_src):
 /case/completeness/single_app_tracing/datatype/map/map_007_T.py
  AffectedNodeName: m
  14:  Var Pass:      m = {"key": "_","src":taint_src}
 /case/completeness/single_app_tracing/datatype/map/map_007_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(m)  # 传递更新后的字典

------------- 143: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/map/map_008_F.py
Line 18: taint_sink(m)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/map/map_008_F.py","functionName":"map_008_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/map/map_008_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def map_008_F(taint_src):
 /case/completeness/single_app_tracing/datatype/map/map_008_F.py
  AffectedNodeName: m
  14:  Var Pass:      m = {"key": "_","src":taint_src}
 /case/completeness/single_app_tracing/datatype/map/map_008_F.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(m)  # 传递更新后的字典

------------- 144: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/map/map_009_T.py
Line 14: taint_sink(config)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/map/map_009_T.py","functionName":"map_009_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/map/map_009_T.py
  AffectedNodeName: taint_src
  16:  SOURCE:  def map_009_T(taint_src):
 /case/completeness/single_app_tracing/datatype/map/map_009_T.py
  AffectedNodeName: settings
  18:  Var Pass:      settings = {"name": taint_src, "language": "en", "font_size": "14"}
 /case/completeness/single_app_tracing/datatype/map/map_009_T.py
  AffectedNodeName: process_config
  19:  CALL:      process_config(settings)
 /case/completeness/single_app_tracing/datatype/map/map_009_T.py
  AffectedNodeName: config
  13:  ARG PASS:  def process_config(config: Mapping[str, str]) -> None:
 /case/completeness/single_app_tracing/datatype/map/map_009_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(config)

------------- 145: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
Line 24: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py","functionName":"type_annotation_new_type_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: taint_src
  19:  SOURCE:  def type_annotation_new_type_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: process_user
  23:  CALL:      x = process_user(taint_src , Product("_"))
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: user
  20:  ARG PASS:      def process_user(user: User , product: Product):
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: [return value]
  21:  Return Value:          return user
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: process_user
  23:  CALL RETURN:     x = process_user(taint_src , Product("_"))
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: x
  23:  Var Pass:      x = process_user(taint_src , Product("_"))
 /case/completeness/single_app_tracing/datatype/new_type/type_annotation_new_type_001_T.py
  AffectedNodeName: taint_sink
  24:  SINK:      taint_sink(x)

------------- 146: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/bool_001_T.py
Line 12: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/bool_001_T.py","functionName":"bool_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/bool_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def bool_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/bool_001_T.py
  AffectedNodeName: taint_sink
  12:  SINK:      taint_sink(taint_src)

------------- 147: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/bool_002_F.py
Line 12: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/bool_002_F.py","functionName":"bool_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/bool_002_F.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def bool_002_F(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/bool_002_F.py
  AffectedNodeName: taint_sink
  12:  SINK:      taint_sink(taint_src)

------------- 148: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/complex_001_T.py
Line 13: taint_sink(tainted_complex)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/complex_001_T.py","functionName":"complex_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/complex_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def complex_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/complex_001_T.py
  AffectedNodeName: tainted_complex
  12:  Var Pass:      tainted_complex = complex(taint_src,4)
 /case/completeness/single_app_tracing/datatype/primitives/complex_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      taint_sink(tainted_complex)

------------- 149: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/complex_003_T.py
Line 14: taint_sink(b)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/complex_003_T.py","functionName":"complex_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/complex_003_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def complex_003_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/complex_003_T.py
  AffectedNodeName: a
  12:  Var Pass:      a = taint_src + 4j
 /case/completeness/single_app_tracing/datatype/primitives/complex_003_T.py
  AffectedNodeName: b
  13:  Var Pass:      b = a.real
 /case/completeness/single_app_tracing/datatype/primitives/complex_003_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(b)

------------- 150: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/complex_004_F.py
Line 14: taint_sink(b)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/complex_004_F.py","functionName":"complex_004_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/complex_004_F.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def complex_004_F(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/complex_004_F.py
  AffectedNodeName: a
  12:  Var Pass:      a = taint_src + 4j
 /case/completeness/single_app_tracing/datatype/primitives/complex_004_F.py
  AffectedNodeName: b
  13:  Var Pass:      b = a.imag
 /case/completeness/single_app_tracing/datatype/primitives/complex_004_F.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(b)

------------- 151: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/float_001_T.py
Line 13: taint_sink(tainted_float)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/float_001_T.py","functionName":"float_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/float_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def float_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/float_001_T.py
  AffectedNodeName: tainted_float
  12:  Var Pass:      tainted_float = taint_src
 /case/completeness/single_app_tracing/datatype/primitives/float_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      taint_sink(tainted_float)

------------- 152: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/int_001_T.py
Line 13: taint_sink(tainted_int)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/int_001_T.py","functionName":"int_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/int_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def int_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/int_001_T.py
  AffectedNodeName: tainted_int
  12:  Var Pass:      tainted_int = taint_src
 /case/completeness/single_app_tracing/datatype/primitives/int_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      taint_sink(tainted_int)

------------- 153: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/none_001_T.py
Line 13: taint_sink(tainted_none)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/none_001_T.py","functionName":"none_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/none_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def none_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/none_001_T.py
  AffectedNodeName: tainted_none
  12:  Var Pass:      tainted_none = taint_src
 /case/completeness/single_app_tracing/datatype/primitives/none_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      taint_sink(tainted_none)

------------- 154: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/str_001_T.py
Line 13: taint_sink(tainted_str)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/str_001_T.py","functionName":"str_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/str_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def str_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/str_001_T.py
  AffectedNodeName: tainted_str
  12:  Var Pass:      tainted_str = taint_src
 /case/completeness/single_app_tracing/datatype/primitives/str_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      taint_sink(tainted_str)

------------- 155: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/type_annotation_bool_001_T.py
Line 14: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/type_annotation_bool_001_T.py","functionName":"type_annotation_bool_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_bool_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def type_annotation_bool_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_bool_001_T.py
  AffectedNodeName: x
  13:  Var Pass:     x: bool = taint_src
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_bool_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:     taint_sink(x)

------------- 156: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
Line 17: taint_sink(sum)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py","functionName":"type_annotation_complex_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def type_annotation_complex_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
  AffectedNodeName: x
  13:  Var Pass:     x: complex = taint_src
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
  AffectedNodeName: sum
  15:  Var Pass:     sum = x + a
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_complex_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:     taint_sink(sum)

------------- 157: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/type_annotation_float_001_T.py
Line 14: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/type_annotation_float_001_T.py","functionName":"type_annotation_float_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_float_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def type_annotation_float_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_float_001_T.py
  AffectedNodeName: x
  13:  Var Pass:     x: float = taint_src
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_float_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:     taint_sink(x)

------------- 158: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/type_annotation_int_001_T.py
Line 15: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/type_annotation_int_001_T.py","functionName":"type_annotation_int_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_int_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def type_annotation_int_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_int_001_T.py
  AffectedNodeName: x
  14:  Var Pass:     x: int = taint_src
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_int_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:     taint_sink(x)

------------- 159: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/type_annotation_none_001_T.py
Line 18: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/type_annotation_none_001_T.py","functionName":"type_annotation_none_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_none_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def type_annotation_none_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_none_001_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(taint_src)

------------- 160: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/primitives/type_annotation_str_001_T.py
Line 15: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/primitives/type_annotation_str_001_T.py","functionName":"type_annotation_str_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_str_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def type_annotation_str_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_str_001_T.py
  AffectedNodeName: x
  14:  Var Pass:     x: str = taint_src
 /case/completeness/single_app_tracing/datatype/primitives/type_annotation_str_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:     taint_sink(x)

------------- 161: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/tuple/tuple_001_T.py
Line 14: taint_sink(t)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/tuple/tuple_001_T.py","functionName":"tuple_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/tuple/tuple_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def tuple_001_T(taint_src):
 /case/completeness/single_app_tracing/datatype/tuple/tuple_001_T.py
  AffectedNodeName: t
  13:  Var Pass:      t = (taint_src, 2, "c")  # 使用 Tuple 节点创建元组字面量
 /case/completeness/single_app_tracing/datatype/tuple/tuple_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(t)

------------- 162: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/datatype/tuple/tuple_003_T.py
Line 15: taint_sink(unpacked)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/datatype/tuple/tuple_003_T.py","functionName":"tuple_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/datatype/tuple/tuple_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def tuple_003_T(taint_src):
 /case/completeness/single_app_tracing/datatype/tuple/tuple_003_T.py
  AffectedNodeName: items
  13:  Var Pass:      items = (taint_src, "b", "c")
 /case/completeness/single_app_tracing/datatype/tuple/tuple_003_T.py
  14:  Var Pass:      *unpacked, last = items  # 使用 Tuple 节点进行解包操作
 /case/completeness/single_app_tracing/datatype/tuple/tuple_003_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(unpacked)

------------- 163: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/exception_error/exception_throw/exception_try_001_T.py
Line 14: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/exception_error/exception_throw/exception_try_001_T.py","functionName":"exception_try_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/exception_error/exception_throw/exception_try_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def exception_try_001_T(taint_src):
 /case/completeness/single_app_tracing/exception_error/exception_throw/exception_try_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:          taint_sink(taint_src)

------------- 164: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/assign_expression_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/assign_expression_001_T.py","functionName":"assign_expression_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/assign_expression_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def assign_expression_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/assign_expression_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/assign_expression_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 165: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_add_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_add_001_T.py","functionName":"binary_expression_add_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_add_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_add_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_add_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src + '_'
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_add_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 166: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_add_assignment_001_T.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_add_assignment_001_T.py","functionName":"binary_expression_add_assignment_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_add_assignment_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_add_assignment_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_add_assignment_001_T.py
  AffectedNodeName: result
  14:  Var Pass:     result += taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_add_assignment_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 167: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_and_001_T.py
Line 15: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_and_001_T.py","functionName":"binary_expression_bitwise_and_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_and_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_bitwise_and_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_and_001_T.py
  AffectedNodeName: x
  14:  Var Pass:     x &= taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_and_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(x)

------------- 168: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_or_001_T.py
Line 15: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_or_001_T.py","functionName":"binary_expression_bitwise_or_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_or_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_bitwise_or_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_or_001_T.py
  AffectedNodeName: x
  14:  Var Pass:     x |= taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_or_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(x)

------------- 169: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_xor_001_T.py
Line 15: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_xor_001_T.py","functionName":"binary_expression_bitwise_xor_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_xor_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_bitwise_xor_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_xor_001_T.py
  AffectedNodeName: x
  14:  Var Pass:     x ^= taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_bitwise_xor_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(x)

------------- 170: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_divide_assignment_001_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_divide_assignment_001_T.py","functionName":"binary_expression_divide_assignment_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_divide_assignment_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def binary_expression_divide_assignment_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_divide_assignment_001_T.py
  AffectedNodeName: result
  15:  Var Pass:     result /= taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_divide_assignment_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 171: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_division_001_T.py
Line 17: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_division_001_T.py","functionName":"binary_expression_division_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_division_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def binary_expression_division_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_division_001_T.py
  AffectedNodeName: result
  16:  Var Pass:      result =result / taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_division_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(result)

------------- 172: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_floor_div_case_001_T.py
Line 14: taint_sink(taint_src//2)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_floor_div_case_001_T.py","functionName":"binary_expression_floor_div_case_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_floor_div_case_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_floor_div_case_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_floor_div_case_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(taint_src // 2)

------------- 173: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_floor_division_001_T.py
Line 15: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_floor_division_001_T.py","functionName":"binary_expression_floor_division_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_floor_division_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_floor_division_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_floor_division_001_T.py
  AffectedNodeName: x
  14:  Var Pass:     x //= taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_floor_division_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(x)

------------- 174: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_left_shift_001_T.py
Line 15: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_left_shift_001_T.py","functionName":"binary_expression_left_shift_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_left_shift_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_left_shift_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_left_shift_001_T.py
  AffectedNodeName: x
  14:  Var Pass:     x <<= taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_left_shift_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(x)

------------- 175: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_matrix_multiplication_001_T.py
Line 23: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_matrix_multiplication_001_T.py","functionName":"binary_expression_matrix_multiplication_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_matrix_multiplication_001_T.py
  AffectedNodeName: taint_src
  15:  SOURCE:  def binary_expression_matrix_multiplication_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_matrix_multiplication_001_T.py
  AffectedNodeName: b
  18:  Var Pass:      b = np.array([[taint_src, 1], [2, 2]])  # 将污染源作为矩阵的一个元素
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_matrix_multiplication_001_T.py
  AffectedNodeName: result
  21:  Var Pass:      result = a @ b
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_matrix_multiplication_001_T.py
  AffectedNodeName: taint_sink
  23:  SINK:      taint_sink(result)

------------- 176: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_mod_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_mod_001_T.py","functionName":"binary_expression_mod_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_mod_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_mod_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_mod_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src % 3  # 取余运算（假设__taint_src为整数）
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_mod_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 177: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_modulo_assignment_001_T.py
Line 15: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_modulo_assignment_001_T.py","functionName":"binary_expression_modulo_assignment_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_modulo_assignment_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_modulo_assignment_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_modulo_assignment_001_T.py
  AffectedNodeName: x
  14:  Var Pass:     x %= taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_modulo_assignment_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(x)

------------- 178: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_mult_001_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_mult_001_T.py","functionName":"binary_expression_mult_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_mult_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def binary_expression_mult_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_mult_001_T.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src * 3
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_mult_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 179: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_multiply_assignment_001_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_multiply_assignment_001_T.py","functionName":"binary_expression_multiply_assignment_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_multiply_assignment_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def binary_expression_multiply_assignment_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_multiply_assignment_001_T.py
  AffectedNodeName: result
  15:  Var Pass:     result *= taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_multiply_assignment_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 180: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_power_assignment_001_T.py
Line 15: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_power_assignment_001_T.py","functionName":"binary_expression_power_assignment_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_power_assignment_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_power_assignment_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_power_assignment_001_T.py
  AffectedNodeName: x
  14:  Var Pass:     x **= taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_power_assignment_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(x)

------------- 181: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_right_shift_001_T.py
Line 15: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_right_shift_001_T.py","functionName":"binary_expression_right_shift_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_right_shift_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def binary_expression_right_shift_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_right_shift_001_T.py
  AffectedNodeName: x
  14:  Var Pass:     x >>= taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_right_shift_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(x)

------------- 182: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_sub_001_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_sub_001_T.py","functionName":"binary_expression_sub_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_sub_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def binary_expression_sub_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_sub_001_T.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src - 1
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_sub_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 183: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_subtract_assignment_001_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_subtract_assignment_001_T.py","functionName":"binary_expression_subtract_assignment_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_subtract_assignment_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def binary_expression_subtract_assignment_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_subtract_assignment_001_T.py
  AffectedNodeName: result
  15:  Var Pass:     result -= taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/binary_expression_subtract_assignment_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 184: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_and_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_and_001_T.py","functionName":"bitwise_expression_and_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_and_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def bitwise_expression_and_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_and_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src & 1  # 现在 taint_src 应该是一个整数
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_and_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 185: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_lsh_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_lsh_001_T.py","functionName":"bitwise_expression_lsh_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_lsh_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def bitwise_expression_lsh_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_lsh_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src << 1
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_lsh_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 186: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_not_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_not_001_T.py","functionName":"bitwise_expression_not_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_not_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def bitwise_expression_not_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_not_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 187: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_or_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_or_001_T.py","functionName":"bitwise_expression_or_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_or_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def bitwise_expression_or_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_or_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src | 1
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_or_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 188: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_rsh_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_rsh_001_T.py","functionName":"bitwise_expression_rsh_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_rsh_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def bitwise_expression_rsh_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_rsh_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src >> 1
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_rsh_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 189: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_xor_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_xor_001_T.py","functionName":"bitwise_expression_xor_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_xor_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def bitwise_expression_xor_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_xor_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src ^ 1
 /case/completeness/single_app_tracing/expression/basic_expression_operation/bitwise_expression_xor_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 190: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/greater_than_equal_001_T.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/greater_than_equal_001_T.py","functionName":"greater_than_equal_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/greater_than_equal_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def greater_than_equal_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/greater_than_equal_001_T.py
  AffectedNodeName: result
  14:  Var Pass:      result = taint_src >= 5
 /case/completeness/single_app_tracing/expression/basic_expression_operation/greater_than_equal_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 191: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/less_than_equal_001_T.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/less_than_equal_001_T.py","functionName":"less_than_equal_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/less_than_equal_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def less_than_equal_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/less_than_equal_001_T.py
  AffectedNodeName: result
  14:  Var Pass:      result = taint_src <= 10
 /case/completeness/single_app_tracing/expression/basic_expression_operation/less_than_equal_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 192: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_and_001_F.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_and_001_F.py","functionName":"logic_expression_and_001_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_and_001_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def logic_expression_and_001_F(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_and_001_F.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src and "aa"
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_and_001_F.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 193: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_and_002_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_and_002_T.py","functionName":"logic_expression_and_002_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_and_002_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def logic_expression_and_002_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_and_002_T.py
  AffectedNodeName: result
  13:  Var Pass:      result =  "_" and taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_and_002_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 194: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_or_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_or_001_T.py","functionName":"logic_expression_or_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_or_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def logic_expression_or_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_or_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src or "_"
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_or_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 195: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_or_002_F.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_or_002_F.py","functionName":"logic_expression_or_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_or_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def logic_expression_or_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_or_002_F.py
  AffectedNodeName: result
  13:  Var Pass:      result = "_" or taint_src
 /case/completeness/single_app_tracing/expression/basic_expression_operation/logic_expression_or_002_F.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 196: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_equal_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_equal_001_T.py","functionName":"relation_expression_equal_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_equal_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def relation_expression_equal_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_equal_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src == 'taint_src_value'
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_equal_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 197: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_equal_002_F.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_equal_002_F.py","functionName":"relation_expression_equal_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_equal_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def relation_expression_equal_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_equal_002_F.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src == 'taint_src'
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_equal_002_F.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 198: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_greater_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_greater_001_T.py","functionName":"relation_expression_greater_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_greater_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def relation_expression_greater_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_greater_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src > 'taint_src'
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_greater_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 199: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_greater_002_F.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_greater_002_F.py","functionName":"relation_expression_greater_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_greater_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def relation_expression_greater_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_greater_002_F.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src > 'taint_src_value'
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_greater_002_F.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 200: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_in_001_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_in_001_T.py","functionName":"relation_expression_in_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_in_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def relation_expression_in_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_in_001_T.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src in container
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_in_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 201: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_in_002_F.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_in_002_F.py","functionName":"relation_expression_in_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_in_002_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def relation_expression_in_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_in_002_F.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src in container
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_in_002_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 202: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_001_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_001_T.py","functionName":"relation_expression_is_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def relation_expression_is_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_001_T.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src is value
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 203: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_002_F.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_002_F.py","functionName":"relation_expression_is_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_002_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def relation_expression_is_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_002_F.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src is value
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_002_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 204: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_not_001_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_not_001_T.py","functionName":"relation_expression_is_not_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_not_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def relation_expression_is_not_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_not_001_T.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src is not value
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_not_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 205: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_not_002_F.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_not_002_F.py","functionName":"relation_expression_is_not_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_not_002_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def relation_expression_is_not_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_not_002_F.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src is not value
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_is_not_002_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 206: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_less_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_less_001_T.py","functionName":"relation_expression_less_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_less_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def relation_expression_less_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_less_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src < '__taint_src_value__taint_src_value'
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_less_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 207: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_less_002_F.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_less_002_F.py","functionName":"relation_expression_less_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_less_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def relation_expression_less_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_less_002_F.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src < 'taint_src'
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_less_002_F.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 208: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_equal_001_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_equal_001_T.py","functionName":"relation_expression_not_equal_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_equal_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def relation_expression_not_equal_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_equal_001_T.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src != '__another_taint_src_value'
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_equal_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 209: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_equal_002_F.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_equal_002_F.py","functionName":"relation_expression_not_equal_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_equal_002_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def relation_expression_not_equal_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_equal_002_F.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src != "taint_src_value"
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_equal_002_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 210: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_in_001_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_in_001_T.py","functionName":"relation_expression_not_in_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_in_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def relation_expression_not_in_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_in_001_T.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src not in container
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_in_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 211: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_in_002_F.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_in_002_F.py","functionName":"relation_expression_not_in_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_in_002_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def relation_expression_not_in_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_in_002_F.py
  AffectedNodeName: result
  15:  Var Pass:      result = taint_src not in container
 /case/completeness/single_app_tracing/expression/basic_expression_operation/relation_expression_not_in_002_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 212: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_001_T.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_001_T.py","functionName":"unary_expression_not_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def unary_expression_not_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 213: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_002_F.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_002_F.py","functionName":"unary_expression_not_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_002_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def unary_expression_not_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_not_002_F.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 214: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_uadd_001_T.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_uadd_001_T.py","functionName":"unary_expression_uadd_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_uadd_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def unary_expression_uadd_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_uadd_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 215: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_usub_001_T.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_usub_001_T.py","functionName":"unary_expression_usub_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_usub_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def unary_expression_usub_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/basic_expression_operation/unary_expression_usub_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 216: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/conditional_expression/conditional_expression_001_T.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/conditional_expression/conditional_expression_001_T.py","functionName":"conditional_expression_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/conditional_expression/conditional_expression_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def conditional_expression_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/conditional_expression/conditional_expression_001_T.py
  AffectedNodeName: result
  14:  Var Pass:      result = taint_src if True else 'aa'
 /case/completeness/single_app_tracing/expression/conditional_expression/conditional_expression_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 217: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/conditional_expression/logical_and_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/conditional_expression/logical_and_001_T.py","functionName":"logical_and_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_and_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def logical_and_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_and_001_T.py
  AffectedNodeName: result
  13:  Var Pass:       result = taint_src.startswith("t") and taint_src  # 污点通过AND条件传递
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_and_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:       taint_sink(result)

------------- 218: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/conditional_expression/logical_and_002_F.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/conditional_expression/logical_and_002_F.py","functionName":"logical_and_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_and_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def logical_and_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_and_002_F.py
  AffectedNodeName: result
  13:  Var Pass:       result = taint_src.startswith("t") and "aa"  # 污点通过AND条件传递
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_and_002_F.py
  AffectedNodeName: taint_sink
  14:  SINK:       taint_sink(result)

------------- 219: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/conditional_expression/logical_or_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/conditional_expression/logical_or_001_T.py","functionName":"logical_or_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_or_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def logical_or_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_or_001_T.py
  AffectedNodeName: result
  13:  Var Pass:       result = taint_src != "taint_src_value" or taint_src # 污点通过OR条件传递
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_or_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:       taint_sink(result)

------------- 220: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/conditional_expression/logical_or_002_F.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/conditional_expression/logical_or_002_F.py","functionName":"logical_or_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_or_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def logical_or_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_or_002_F.py
  AffectedNodeName: result
  13:  Var Pass:       result = taint_src != "taint_src_value" or "aa" # 污点通过OR条件传递
 /case/completeness/single_app_tracing/expression/conditional_expression/logical_or_002_F.py
  AffectedNodeName: taint_sink
  14:  SINK:       taint_sink(result)

------------- 221: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/lambda_expression/lambda_expression_001_T.py
Line 23: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/lambda_expression/lambda_expression_001_T.py","functionName":"lambda_expression_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/lambda_expression/lambda_expression_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def lambda_expression_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/lambda_expression/lambda_expression_001_T.py
  AffectedNodeName: <anonymous_17_19>
  20:  CALL:      result = lambda_func(taint_src)
 /case/completeness/single_app_tracing/expression/lambda_expression/lambda_expression_001_T.py
  AffectedNodeName: a
  17:  ARG PASS:      lambda_func = lambda a: a
 /case/completeness/single_app_tracing/expression/lambda_expression/lambda_expression_001_T.py
  AffectedNodeName: [return value]
  17:  Return Value:      lambda_func = lambda a: a
 /case/completeness/single_app_tracing/expression/lambda_expression/lambda_expression_001_T.py
  AffectedNodeName: <anonymous_17_19>
  20:  CALL RETURN:     result = lambda_func(taint_src)
 /case/completeness/single_app_tracing/expression/lambda_expression/lambda_expression_001_T.py
  AffectedNodeName: result
  20:  Var Pass:      result = lambda_func(taint_src)
 /case/completeness/single_app_tracing/expression/lambda_expression/lambda_expression_001_T.py
  AffectedNodeName: taint_sink
  23:  SINK:      taint_sink(result)

------------- 222: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/del_expression_001_T.py
Line 21: taint_sink(Employee.lastname)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/del_expression_001_T.py","functionName":"del_expression_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def del_expression_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_001_T.py
  AffectedNodeName: lastname
  18:  Var Pass:      Employee = EmployeeClass(firstname='Bob', lastname=taint_src)
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_001_T.py
  AffectedNodeName: __init__
  18:  CALL:      Employee = EmployeeClass(firstname='Bob', lastname=taint_src)
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_001_T.py
  AffectedNodeName: lastname
  14:  ARG PASS:          def __init__(self, firstname, lastname):
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_001_T.py
  16:  Var Pass:              self.lastname = lastname
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_001_T.py
  AffectedNodeName: taint_sink
  21:  SINK:      taint_sink(Employee.lastname)

------------- 223: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/del_expression_002_F.py
Line 19: taint_sink(employee.get(lastname))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/del_expression_002_F.py","functionName":"del_expression_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def del_expression_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_002_F.py
  AffectedNodeName: employee
  13:  Var Pass:      employee = {
  14:  Var Pass:          'firstname': 'Bob',
  15:  Var Pass:          'lastname': taint_src,
  16:  Var Pass:      }
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_002_F.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(employee.get('lastname'))  # 由于 lastname 已被删除，这将返回 None

------------- 224: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/del_expression_003_T.py
Line 15: taint_sink(array)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/del_expression_003_T.py","functionName":"del_expression_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def del_expression_003_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_003_T.py
  AffectedNodeName: array
  13:  Var Pass:      array = [taint_src, 'b', 'c', 'd']
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_003_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(array)

------------- 225: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/del_expression_004_F.py
Line 15: taint_sink(array)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/del_expression_004_F.py","functionName":"del_expression_004_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_004_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def del_expression_004_F(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_004_F.py
  AffectedNodeName: array
  13:  Var Pass:      array = [taint_src, 'b', 'c', 'd']
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_004_F.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(array)

------------- 226: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/del_expression_005_T.py
Line 16: taint_sink(dct)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/del_expression_005_T.py","functionName":"del_expression_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_005_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def del_expression_005_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_005_T.py
  AffectedNodeName: dct
  14:  Var Pass:      dct = {"key1": taint_src,"key2":"aaa"}  # 初始化字典，包含 __taint_src 的值
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_005_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(dct)  # 将修改后的字典传递给 sink 点

------------- 227: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/del_expression_006_F.py
Line 16: taint_sink(dct)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/del_expression_006_F.py","functionName":"del_expression_006_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_006_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def del_expression_006_F(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_006_F.py
  AffectedNodeName: dct
  14:  Var Pass:      dct = {"key1": taint_src,"key2":"aaa"}  # 初始化字典，包含 __taint_src 的值
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_006_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(dct)  # 将修改后的字典传递给 sink 点

------------- 228: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/del_expression_007_T.py
Line 16: taint_sink(lst)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/del_expression_007_T.py","functionName":"del_expression_007_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_007_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def del_expression_007_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_007_T.py
  AffectedNodeName: lst
  14:  Var Pass:      lst = [taint_src, "b", "c", "d"]  # 初始化列表，包含 __taint_src 的值
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_007_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(lst)  # 将修改后的列表传递给 sink 点

------------- 229: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/del_expression_008_F.py
Line 16: taint_sink(lst)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/del_expression_008_F.py","functionName":"del_expression_008_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_008_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def del_expression_008_F(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_008_F.py
  AffectedNodeName: lst
  14:  Var Pass:      lst = [taint_src, "b", "c", "d"]  # 初始化列表，包含 __taint_src 的值
 /case/completeness/single_app_tracing/expression/special_expression/del_expression_008_F.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(lst)  # 将修改后的列表传递给 sink 点

------------- 230: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_001_T.py
Line 15: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_001_T.py","functionName":"destructuring_assignment_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def destructuring_assignment_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_001_T.py
  AffectedNodeName: arr
  13:  Var Pass:      arr = ['_', '_', taint_src]
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_001_T.py
  14:  Var Pass:      a, b, result = arr  # 解构赋值
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result)

------------- 231: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_003_T.py
Line 17: taint_sink(c)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_003_T.py","functionName":"destructuring_assignment_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def destructuring_assignment_003_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_003_T.py
  AffectedNodeName: arr
  13:  Var Pass:      arr = {'a': '_', 'b': '_', 'c': taint_src}
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_003_T.py
  AffectedNodeName: c
  16:  Var Pass:      c = arr['c']
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_003_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(c)

------------- 232: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_004_F.py
Line 17: taint_sink(a)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_004_F.py","functionName":"destructuring_assignment_004_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_004_F.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def destructuring_assignment_004_F(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_004_F.py
  AffectedNodeName: arr
  15:  Var Pass:      arr = {'a': '_', 'b': '_', 'c': taint_src}
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_004_F.py
  16:  Var Pass:      a, b, c = itemgetter('a', 'b', 'c')(arr)  # 使用 itemgetter 进行解构赋值
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_004_F.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(a)

------------- 233: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_005_T.py
Line 15: taint_sink(c)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_005_T.py","functionName":"destructuring_assignment_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_005_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def destructuring_assignment_005_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_005_T.py
  AffectedNodeName: arr
  13:  Var Pass:      arr = ['_', '_', [taint_src, '_']]
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_005_T.py
  14:  Var Pass:      a, b, (c, d) = arr  # 解构赋值，包括嵌套的列表
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_005_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(c)

------------- 234: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_006_F.py
Line 15: taint_sink(d)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_006_F.py","functionName":"destructuring_assignment_006_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_006_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def destructuring_assignment_006_F(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_006_F.py
  AffectedNodeName: arr
  13:  Var Pass:      arr = ['_', '_', [taint_src, '_']]
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_006_F.py
  14:  Var Pass:      a, b, (c, d) = arr
 /case/completeness/single_app_tracing/expression/special_expression/destructuring_assignment_006_F.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(d)

------------- 235: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/enum_001_T.py
Line 23: taint_sink(color_map.blue.value)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/enum_001_T.py","functionName":"enum_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/enum_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def enum_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/enum_001_T.py
  AffectedNodeName: BLUE
  20:  Var Pass:        BLUE = taint_src
 /case/completeness/single_app_tracing/expression/special_expression/enum_001_T.py
  AffectedNodeName: color_map
  22:  Var Pass:      color_map = {"red": Color.RED, "green": Color.GREEN, "blue": Color.BLUE}
 /case/completeness/single_app_tracing/expression/special_expression/enum_001_T.py
  AffectedNodeName: taint_sink
  23:  SINK:      taint_sink(color_map["blue"].value)

------------- 236: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/exponentiation_operator_001_T.py
Line 13: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/exponentiation_operator_001_T.py","functionName":"exponentiation_operator_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/exponentiation_operator_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def exponentiation_operator_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/exponentiation_operator_001_T.py
  AffectedNodeName: result
  12:  Var Pass:      result = taint_src ** 2
 /case/completeness/single_app_tracing/expression/special_expression/exponentiation_operator_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      taint_sink(result)

------------- 237: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/list_comprehension_001_T.py
Line 15: taint_sink(result.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/list_comprehension_001_T.py","functionName":"list_comprehension_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/list_comprehension_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def list_comprehension_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/list_comprehension_001_T.py
  AffectedNodeName: result
  14:  Var Pass:      result = [x for x in (taint_src, "_")]
 /case/completeness/single_app_tracing/expression/special_expression/list_comprehension_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result[0])

------------- 238: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/list_comprehension_002_F.py
Line 15: taint_sink(result.1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/list_comprehension_002_F.py","functionName":"list_comprehension_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/list_comprehension_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def list_comprehension_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/list_comprehension_002_F.py
  AffectedNodeName: result
  14:  Var Pass:      result = [x for x in (taint_src, "_")]
 /case/completeness/single_app_tracing/expression/special_expression/list_comprehension_002_F.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(result[1])

------------- 239: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/multi_target_assignment_001_T.py
Line 18: taint_sink(c)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/multi_target_assignment_001_T.py","functionName":"multi_target_assignment_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/multi_target_assignment_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def multi_target_assignment_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/multi_target_assignment_001_T.py
  AffectedNodeName: c
  14:  Var Pass:      a = b = c = d = taint_src
 /case/completeness/single_app_tracing/expression/special_expression/multi_target_assignment_001_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(c)

------------- 240: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/rest_parameter_001_T.py
Line 16: taint_sink(rest)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/rest_parameter_001_T.py","functionName":"rest_parameter_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/rest_parameter_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def rest_parameter_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/rest_parameter_001_T.py
  AffectedNodeName: foo
  13:  Var Pass:      foo = taint_src
 /case/completeness/single_app_tracing/expression/special_expression/rest_parameter_001_T.py
  15:  Var Pass:      r1, r2, *rest = [123, 456, foo, bar]
 /case/completeness/single_app_tracing/expression/special_expression/rest_parameter_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(rest)

------------- 241: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/spread_operator_001_T.py
Line 15: taint_sink(array)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/spread_operator_001_T.py","functionName":"spread_operator_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def spread_operator_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_001_T.py
  AffectedNodeName: array1
  13:  Var Pass:      array1 = ['a', 'b', taint_src]
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_001_T.py
  AffectedNodeName: array
  14:  Var Pass:      array = ['c', *array1]
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(array)

------------- 242: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/spread_operator_003_T.py
Line 22: taint_sink(newParams)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/spread_operator_003_T.py","functionName":"spread_operator_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def spread_operator_003_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_003_T.py
  AffectedNodeName: params
  13:  Var Pass:      params = {
  14:  Var Pass:          'name': 'Tony',
  15:  Var Pass:          'age': '12',
  16:  Var Pass:          'id': taint_src,
  17:  Var Pass:      }
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_003_T.py
  AffectedNodeName: newParams
  18:  Var Pass:      newParams = {
  19:  Var Pass:          'score': 100,
  20:  Var Pass:          **params,
  21:  Var Pass:      }
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_003_T.py
  AffectedNodeName: taint_sink
  22:  SINK:      taint_sink(newParams)

------------- 243: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/spread_operator_005_T.py
Line 17: taint_sink(args)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/spread_operator_005_T.py","functionName":"spread_operator_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_005_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def spread_operator_005_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_005_T.py
  AffectedNodeName: collectArgs
  13:  CALL:      collectArgs(taint_src,'prefix', 'suffix')
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_005_T.py
  AffectedNodeName: args
  16:  ARG PASS:  def collectArgs(*args):
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_005_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(args)

------------- 244: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/spread_operator_007_T.py
Line 17: taint_sink(args)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/spread_operator_007_T.py","functionName":"spread_operator_007_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_007_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def spread_operator_007_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_007_T.py
  AffectedNodeName: collectArgs
  13:  CALL:      collectArgs(['prefix', taint_src, 'suffix'])
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_007_T.py
  AffectedNodeName: args
  16:  ARG PASS:  def collectArgs(*args):
 /case/completeness/single_app_tracing/expression/special_expression/spread_operator_007_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(args)

------------- 245: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/template_literal_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/template_literal_001_T.py","functionName":"template_literal_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/template_literal_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def template_literal_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/template_literal_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = f"_{taint_src}"
 /case/completeness/single_app_tracing/expression/special_expression/template_literal_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 246: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/template_literal_003_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/template_literal_003_T.py","functionName":"template_literal_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/template_literal_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def template_literal_003_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/template_literal_003_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = f"{taint_src}_"
 /case/completeness/single_app_tracing/expression/special_expression/template_literal_003_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 247: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/special_expression/template_literal_005_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/special_expression/template_literal_005_T.py","functionName":"template_literal_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/special_expression/template_literal_005_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def template_literal_005_T(taint_src):
 /case/completeness/single_app_tracing/expression/special_expression/template_literal_005_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = f"_{taint_src}_"
 /case/completeness/single_app_tracing/expression/special_expression/template_literal_005_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 248: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/type_cast/bool_conversion_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/type_cast/bool_conversion_001_T.py","functionName":"bool_conversion_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/type_cast/bool_conversion_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def bool_conversion_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/type_cast/bool_conversion_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = bool(taint_src)
 /case/completeness/single_app_tracing/expression/type_cast/bool_conversion_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 249: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/type_cast/float_truncate_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/type_cast/float_truncate_001_T.py","functionName":"float_truncate_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/type_cast/float_truncate_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def float_truncate_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/type_cast/float_truncate_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = float(taint_src)
 /case/completeness/single_app_tracing/expression/type_cast/float_truncate_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 250: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/type_cast/int_truncate_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/type_cast/int_truncate_001_T.py","functionName":"int_truncate_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/type_cast/int_truncate_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def int_truncate_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/type_cast/int_truncate_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = int(taint_src)  # 浮点数截断为整数
 /case/completeness/single_app_tracing/expression/type_cast/int_truncate_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 251: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/type_cast/str_conversion_001_T.py
Line 13: taint_sink(tainted_str)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/type_cast/str_conversion_001_T.py","functionName":"str_conversion_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/type_cast/str_conversion_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def str_conversion_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/type_cast/str_conversion_001_T.py
  AffectedNodeName: tainted_str
  12:  Var Pass:      tainted_str = str(taint_src)
 /case/completeness/single_app_tracing/expression/type_cast/str_conversion_001_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      taint_sink(tainted_str)

------------- 252: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/type_cast/type_cast_001_T.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/type_cast/type_cast_001_T.py","functionName":"type_cast_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/type_cast/type_cast_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def type_cast_001_T(taint_src):
 /case/completeness/single_app_tracing/expression/type_cast/type_cast_001_T.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src == 5
 /case/completeness/single_app_tracing/expression/type_cast/type_cast_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 253: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/expression/type_cast/type_cast_002_F.py
Line 14: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/expression/type_cast/type_cast_002_F.py","functionName":"type_cast_002_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/expression/type_cast/type_cast_002_F.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def type_cast_002_F(taint_src):
 /case/completeness/single_app_tracing/expression/type_cast/type_cast_002_F.py
  AffectedNodeName: result
  13:  Var Pass:      result = taint_src == "5"
 /case/completeness/single_app_tracing/expression/type_cast/type_cast_002_F.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(result)

------------- 254: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_002_T.py
Line 13: taint_sink(input)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_002_T.py","functionName":"anonymous_function_002_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_002_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def anonymous_function_002_T(taint_src):
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_002_T.py
  AffectedNodeName: <anonymous_13_15>
  14:  CALL:      process(taint_src)
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_002_T.py
  AffectedNodeName: input
  13:  ARG PASS:      process = lambda input: taint_sink(input)
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_002_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      process = lambda input: taint_sink(input)

------------- 255: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_004_T.py
Line 13: taint_sink(taint_src+y)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_004_T.py","functionName":"anonymous_function_004_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_004_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def anonymous_function_004_T(taint_src):
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_004_T.py
  AffectedNodeName: taint_sink
  13:  SINK:      process = lambda x, y: taint_sink(taint_src + y)

------------- 256: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_006_T.py
Line 14: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_006_T.py","functionName":"anonymous_function_006_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_006_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def anonymous_function_006_T(taint_src):
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_006_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      (lambda: taint_sink(taint_src))()

------------- 257: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_008_T.py
Line 14: taint_sink(x+n)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_008_T.py","functionName":"anonymous_function_008_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_008_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def anonymous_function_008_T(taint_src):
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_008_T.py
  AffectedNodeName: <anonymous_14_18>
  17:  CALL:      make_adder(taint_src)("abc")
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_008_T.py
  AffectedNodeName: n
  14:  ARG PASS:      make_adder = lambda n: (lambda x: taint_sink(x + n))
 /case/completeness/single_app_tracing/function_call/anonymous_function_closure/anonymous_function_008_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      make_adder = lambda n: (lambda x: taint_sink(x + n))

------------- 258: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_002_T.py
Line 15: taint_sink(inner_input)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_002_T.py","functionName":"argument_passing_normal_value_002_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_002_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def argument_passing_normal_value_002_T(taint_src):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_002_T.py
  AffectedNodeName: outer
  19:  CALL:      outer(taint_src)
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_002_T.py
  AffectedNodeName: input
  13:  ARG PASS:      def outer(input):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_002_T.py
  AffectedNodeName: inner
  17:  CALL:          inner(input)
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_002_T.py
  AffectedNodeName: inner_input
  14:  ARG PASS:          def inner(inner_input):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_002_T.py
  AffectedNodeName: taint_sink
  15:  SINK:              taint_sink(inner_input)

------------- 259: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_003_T.py
Line 14: taint_sink(arg1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_003_T.py","functionName":"argument_passing_normal_value_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def argument_passing_normal_value_003_T(taint_src: str):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_003_T.py
  AffectedNodeName: process
  16:  CALL:      process(taint_src,"_")
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_003_T.py
  AffectedNodeName: arg1
  13:  ARG PASS:      def process(arg1: str,arg2: str):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_normal_value_003_T.py
  AffectedNodeName: taint_sink
  14:  SINK:          taint_sink(arg1)

------------- 260: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_002_T.py
Line 15: taint_sink(obj.data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_002_T.py","functionName":"argument_passing_reference_002_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_002_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def argument_passing_reference_002_T(taint_src):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_002_T.py
  AffectedNodeName: process
  14:  CALL:      process(obj, taint_src)  # 将__taint_src作为参数传递给process函数
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_002_T.py
  AffectedNodeName: taint_src
  18:  ARG PASS:  def process(obj, taint_src):  # 增加参数__taint_src
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_002_T.py
  19:  Var Pass:      obj['data'] = taint_src
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_002_T.py
  AffectedNodeName: taint_sink
  15:  SINK:      taint_sink(obj['data'])

------------- 261: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_004_T.py
Line 18: taint_sink(arr)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_004_T.py","functionName":"argument_passing_reference_004_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_004_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def argument_passing_reference_004_T(taint_src):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_004_T.py
  14:  Var Pass:          input_arr[0] = taint_src
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_004_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(arr)

------------- 262: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_006_T.py
Line 17: taint_sink(objB.name)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_006_T.py","functionName":"argument_passing_reference_006_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_006_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def argument_passing_reference_006_T(taint_src):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_006_T.py
  AffectedNodeName: objA
  13:  Var Pass:      objA = {'name': taint_src}
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_006_T.py
  AffectedNodeName: swap
  16:  CALL:      swap(objA, objB)
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_006_T.py
  AffectedNodeName: obj1
  20:  ARG PASS:  def swap(obj1, obj2):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_006_T.py
  AffectedNodeName: temp
  21:  Var Pass:      temp = obj1['name']
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_006_T.py
  23:  Var Pass:      obj2['name'] = temp
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_reference_006_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(objB['name'])

------------- 263: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_001_T.py
Line 15: taint_sink(b)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_001_T.py","functionName":"argument_passing_various_types_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def argument_passing_various_types_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_001_T.py
  AffectedNodeName: process
  18:  CALL:      process(1, taint_src, 4, c="critical", data=taint_src)
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_001_T.py
  AffectedNodeName: b
  14:  ARG PASS:      def process(a, b=2, *args, c, d=3, **kwargs):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:          taint_sink(b)

------------- 264: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_003_T.py
Line 15: taint_sink(b)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_003_T.py","functionName":"argument_passing_various_types_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_003_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def argument_passing_various_types_003_T(taint_src):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_003_T.py
  AffectedNodeName: b
  18:  Var Pass:      process(b=taint_src, a=1, c="critical", data=taint_src)
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_003_T.py
  AffectedNodeName: process
  18:  CALL:      process(b=taint_src, a=1, c="critical", data=taint_src)
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_003_T.py
  AffectedNodeName: b
  14:  ARG PASS:      def process(a, b=2, *args, **kwargs):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_003_T.py
  AffectedNodeName: taint_sink
  15:  SINK:          taint_sink(b)

------------- 265: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_007_T.py
Line 15: taint_sink(args.0)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_007_T.py","functionName":"argument_passing_various_types_007_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_007_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def argument_passing_various_types_007_T(taint_src):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_007_T.py
  AffectedNodeName: process
  18:  CALL:      process(1, taint_src, c="critical", data=taint_src, *(taint_src,"nono"))
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_007_T.py
  AffectedNodeName: args
  14:  ARG PASS:      def process(a, b=2, *args, **kwargs):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_007_T.py
  AffectedNodeName: taint_sink
  15:  SINK:          taint_sink(args[0])

------------- 266: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_008_F.py
Line 15: taint_sink(args.1)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_008_F.py","functionName":"argument_passing_various_types_008_F","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_008_F.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def argument_passing_various_types_008_F(taint_src):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_008_F.py
  AffectedNodeName: process
  18:  CALL:      process(1, taint_src,  c="critical", data=taint_src, *(taint_src,"nono"))
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_008_F.py
  AffectedNodeName: args
  14:  ARG PASS:      def process(a, b=2, *args, **kwargs):
 /case/completeness/single_app_tracing/function_call/argument_passing/argument_passing_various_types_008_F.py
  AffectedNodeName: taint_sink
  15:  SINK:          taint_sink(args[1])

------------- 267: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/chained_call/chained_call_002_T.py
Line 34: self.taint_sink(self.name)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/chained_call/chained_call_002_T.py","functionName":"chained_call_002_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/chained_call/chained_call_002_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def chained_call_002_T(taint_src):
 /case/completeness/single_app_tracing/function_call/chained_call/chained_call_002_T.py
  AffectedNodeName: set_name
  13:  CALL:      A(taint_sink).set_name("_").clear_name().set_name(taint_src).process()
 /case/completeness/single_app_tracing/function_call/chained_call/chained_call_002_T.py
  AffectedNodeName: name
  25:  ARG PASS:      def set_name(self, name):
 /case/completeness/single_app_tracing/function_call/chained_call/chained_call_002_T.py
  26:  Var Pass:          self.name = name
 /case/completeness/single_app_tracing/function_call/chained_call/chained_call_002_T.py
  AffectedNodeName: set_name
  13:  CALL RETURN:     A(taint_sink).set_name("_").clear_name().set_name(taint_src).process()
 /case/completeness/single_app_tracing/function_call/chained_call/chained_call_002_T.py
  13:  ARG PASS:      A(taint_sink).set_name("_").clear_name().set_name(taint_src).process()
 /case/completeness/single_app_tracing/function_call/chained_call/chained_call_002_T.py
  AffectedNodeName: self.taint_sink
  34:  SINK:          self.taint_sink(self.name)  # 使用保存的污染接收函数

------------- 268: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/chained_call/chained_call_003_T.py
Line 25: taint_sink(taint_src)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/chained_call/chained_call_003_T.py","functionName":"chained_call_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/chained_call/chained_call_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def chained_call_003_T(taint_src):
 /case/completeness/single_app_tracing/function_call/chained_call/chained_call_003_T.py
  AffectedNodeName: taint_sink
  25:  SINK:          taint_sink(taint_src)

------------- 269: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/decorator_function/abstractmethod_decorator_001_T.py
Line 30: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/decorator_function/abstractmethod_decorator_001_T.py","functionName":"abstractmethod_decorator_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/decorator_function/abstractmethod_decorator_001_T.py
  AffectedNodeName: taint_src
  27:  SOURCE:  def abstractmethod_decorator_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/decorator_function/abstractmethod_decorator_001_T.py
  AffectedNodeName: result
  29:  Var Pass:      result = processor.process(taint_src)
 /case/completeness/single_app_tracing/function_call/decorator_function/abstractmethod_decorator_001_T.py
  AffectedNodeName: taint_sink
  30:  SINK:      taint_sink(result)

------------- 270: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/decorator_function/property_decorator_001_T.py
Line 43: taint_sink(obj.value)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/decorator_function/property_decorator_001_T.py","functionName":"property_decorator_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/decorator_function/property_decorator_001_T.py
  AffectedNodeName: taint_src
  34:  SOURCE:  def property_decorator_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/decorator_function/property_decorator_001_T.py
  40:  Var Pass:      obj.value = taint_src
 /case/completeness/single_app_tracing/function_call/decorator_function/property_decorator_001_T.py
  AffectedNodeName: taint_sink
  43:  SINK:      taint_sink(obj.value)

------------- 271: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/decorator_function/staticmethod_decorator_001_T.py
Line 22: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/decorator_function/staticmethod_decorator_001_T.py","functionName":"staticmethod_decorator_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/decorator_function/staticmethod_decorator_001_T.py
  AffectedNodeName: taint_src
  19:  SOURCE:  def staticmethod_decorator_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/decorator_function/staticmethod_decorator_001_T.py
  AffectedNodeName: [return value]
  16:  Return Value:          return data
 /case/completeness/single_app_tracing/function_call/decorator_function/staticmethod_decorator_001_T.py
  AffectedNodeName: process
  15:  CALL RETURN:     def process(data):
  16:  CALL RETURN:         return data
 /case/completeness/single_app_tracing/function_call/decorator_function/staticmethod_decorator_001_T.py
  AffectedNodeName: result
  21:  Var Pass:      result = Processor.process(taint_src)
 /case/completeness/single_app_tracing/function_call/decorator_function/staticmethod_decorator_001_T.py
  AffectedNodeName: taint_sink
  22:  SINK:      taint_sink(result)

------------- 272: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/generator_function/generator_function_002_T.py
Line 21: taint_sink(first_value)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/generator_function/generator_function_002_T.py","functionName":"generator_function_002_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_002_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def generator_function_002_T(taint_src):
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_002_T.py
  AffectedNodeName: [return value]
  14:  Return Value:          a = yield taint_src
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_002_T.py
  AffectedNodeName: [return value]
  15:  Return Value:          b = yield (a + 2)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_002_T.py
  AffectedNodeName: [return value]
  16:  Return Value:          yield (b + 3)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_002_T.py
  AffectedNodeName: my_gen
  18:  CALL RETURN:     g = my_gen()
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_002_T.py
  AffectedNodeName: g
  18:  Var Pass:      g = my_gen()
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_002_T.py
  AffectedNodeName: first_value
  20:  Var Pass:      first_value = next(g)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_002_T.py
  AffectedNodeName: taint_sink
  21:  SINK:      taint_sink(first_value)

------------- 273: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/generator_function/generator_function_004_T.py
Line 26: taint_sink(second_yield)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/generator_function/generator_function_004_T.py","functionName":"generator_function_004_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_004_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def generator_function_004_T(taint_src):
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_004_T.py
  AffectedNodeName: [return value]
  14:  Return Value:          a = yield taint_src
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_004_T.py
  AffectedNodeName: [return value]
  15:  Return Value:          b = yield (a + "2")
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_004_T.py
  AffectedNodeName: [return value]
  16:  Return Value:          yield b + '_'
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_004_T.py
  AffectedNodeName: my_gen
  18:  CALL RETURN:     g = my_gen()
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_004_T.py
  AffectedNodeName: g
  18:  Var Pass:      g = my_gen()
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_004_T.py
  AffectedNodeName: first_yield
  21:  Var Pass:      first_yield = next(g)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_004_T.py
  AffectedNodeName: second_yield
  24:  Var Pass:      second_yield = g.send(first_yield)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_004_T.py
  AffectedNodeName: taint_sink
  26:  SINK:      taint_sink(second_yield)

------------- 274: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
Line 23: taint_sink(next(g))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py","functionName":"generator_function_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def generator_function_005_T(taint_src):
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: outer_gen
  22:  CALL:      g = outer_gen(taint_src)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: taint_src
  13:  ARG PASS:      def outer_gen(taint_src):
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: my_inner_gen
  14:  CALL:          inner_gen = my_inner_gen(taint_src)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: t
  18:  ARG PASS:      def my_inner_gen(t):
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: [return value]
  19:  Return Value:          a = yield t  # 污染源通过参数传递
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: [return value]
  20:  Return Value:          yield a + "3"
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: my_inner_gen
  14:  CALL RETURN:         inner_gen = my_inner_gen(taint_src)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: inner_gen
  14:  Var Pass:          inner_gen = my_inner_gen(taint_src)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: first
  15:  Var Pass:          first = next(inner_gen)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: [return value]
  16:  Return Value:          yield first
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: outer_gen
  22:  CALL RETURN:     g = outer_gen(taint_src)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: g
  22:  Var Pass:      g = outer_gen(taint_src)
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_005_T.py
  AffectedNodeName: taint_sink
  23:  SINK:      taint_sink(next(g))  # 跟踪外层生成器的首次 yield

------------- 275: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/generator_function/generator_function_007_T.py
Line 14: taint_sink(next(gen))
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/generator_function/generator_function_007_T.py","functionName":"generator_function_007_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_007_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def generator_function_007_T(taint_src):
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_007_T.py
  AffectedNodeName: gen
  13:  Var Pass:      gen = (taint_src for _ in range(1))  # 简化示例，仅循环一次以展示概念
 /case/completeness/single_app_tracing/function_call/generator_function/generator_function_007_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(next(gen))

------------- 276: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_001_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_001_T.py","functionName":"yieldFrom_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def yieldFrom_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_001_T.py
  AffectedNodeName: [return value]
  14:  Return Value:          yield from taint_src  # 使用 yield from 委托生成器
 /case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_001_T.py
  AffectedNodeName: generator
  15:  CALL RETURN:     result = "".join(generator())
 /case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_001_T.py
  AffectedNodeName: result
  15:  Var Pass:      result = "".join(generator())
 /case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 277: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_003_T.py
Line 16: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_003_T.py","functionName":"yieldFrom_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def yieldFrom_003_T(taint_src):
 /case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_003_T.py
  AffectedNodeName: [return value]
  14:  Return Value:          yield from (x for x in taint_src)  # 使用 yield from 嵌套生成器
 /case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_003_T.py
  AffectedNodeName: generator
  15:  CALL RETURN:     result = "".join(generator())
 /case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_003_T.py
  AffectedNodeName: result
  15:  Var Pass:      result = "".join(generator())
 /case/completeness/single_app_tracing/function_call/generator_function/yieldFrom_003_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(result)

------------- 278: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_002_T.py
Line 21: taint_sink(f(taint_src, _)())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_002_T.py","functionName":"higher_order_function_002_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_002_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def higher_order_function_002_T(taint_src):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_002_T.py
  AffectedNodeName: f
  21:  CALL:      taint_sink(f(taint_src, '_')())
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_002_T.py
  AffectedNodeName: a
  13:  ARG PASS:      def f(a, b):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_002_T.py
  AffectedNodeName: [return value]
  17:  Return Value:              return a + b + c
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_002_T.py
  AffectedNodeName: inner
  21:  CALL RETURN:     taint_sink(f(taint_src, '_')())
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_002_T.py
  AffectedNodeName: taint_sink
  21:  SINK:      taint_sink(f(taint_src, '_')())

------------- 279: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_004_T.py
Line 20: taint_sink(f(g, taint_src, _)())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_004_T.py","functionName":"higher_order_function_004_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_004_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def higher_order_function_004_T(taint_src):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_004_T.py
  AffectedNodeName: f
  20:  CALL:      taint_sink(f(g, taint_src, '_')())
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_004_T.py
  AffectedNodeName: a
  13:  ARG PASS:      def f(g, a, b):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_004_T.py
  AffectedNodeName: g
  14:  CALL:          return g(a, b)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_004_T.py
  AffectedNodeName: a
  16:  ARG PASS:      def g(a, b):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_004_T.py
  AffectedNodeName: [return value]
  18:  Return Value:          return lambda: a + b + c
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_004_T.py
  AffectedNodeName: <anonymous_18_16>
  20:  CALL RETURN:     taint_sink(f(g, taint_src, '_')())
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_004_T.py
  AffectedNodeName: taint_sink
  20:  SINK:      taint_sink(f(g, taint_src, '_')())

------------- 280: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py
Line 26: taint_sink(f(g, u, taint_src, _)())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py","functionName":"higher_order_function_006_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def higher_order_function_006_T(taint_src):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py
  AffectedNodeName: f
  26:  CALL:      taint_sink(f(g, u, taint_src, '_')())
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py
  AffectedNodeName: a
  13:  ARG PASS:      def f(g, u, a, b):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py
  AffectedNodeName: g
  14:  CALL:          return g(u, a, b)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py
  AffectedNodeName: a
  16:  ARG PASS:      def g(u, a, b):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py
  AffectedNodeName: u
  18:  CALL:          return u(a, b, c)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py
  AffectedNodeName: a
  20:  ARG PASS:      def u(a, b, c):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py
  AffectedNodeName: [return value]
  22:  Return Value:              return a + b + c
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py
  AffectedNodeName: inner
  26:  CALL RETURN:     taint_sink(f(g, u, taint_src, '_')())
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_006_T.py
  AffectedNodeName: taint_sink
  26:  SINK:      taint_sink(f(g, u, taint_src, '_')())

------------- 281: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_008_T.py
Line 17: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_008_T.py","functionName":"higher_order_function_008_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_008_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def higher_order_function_008_T(taint_src):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_008_T.py
  AffectedNodeName: <anonymous_16_36>
  14:  CALL:          return callback(taint_src, '_')
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_008_T.py
  AffectedNodeName: a
  16:  ARG PASS:      result = higher_order_function(lambda a, b: a + b)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_008_T.py
  AffectedNodeName: [return value]
  16:  Return Value:      result = higher_order_function(lambda a, b: a + b)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_008_T.py
  AffectedNodeName: <anonymous_16_36>
  14:  CALL RETURN:         return callback(taint_src, '_')
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_008_T.py
  AffectedNodeName: [return value]
  14:  Return Value:          return callback(taint_src, '_')
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_008_T.py
  AffectedNodeName: higher_order_function
  16:  CALL RETURN:     result = higher_order_function(lambda a, b: a + b)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_008_T.py
  AffectedNodeName: result
  16:  Var Pass:      result = higher_order_function(lambda a, b: a + b)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_008_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(result)

------------- 282: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
Line 24: taint_sink(combined)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py","functionName":"higher_order_function_010_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def higher_order_function_010_T(taint_src):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: <anonymous_15_16>
  23:  CALL:      combined = process_sequence(add_prefix, add_suffix)(taint_src)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: s
  15:  ARG PASS:          return lambda s: func2(func1(s))
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: add_prefix
  15:  CALL:          return lambda s: func2(func1(s))
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: s
  17:  ARG PASS:      def add_prefix(s):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: [return value]
  18:  Return Value:          return f"pre_{s}"
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: add_prefix
  15:  CALL RETURN:         return lambda s: func2(func1(s))
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: s
  20:  ARG PASS:      def add_suffix(s):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: [return value]
  21:  Return Value:          return f"{s}_post"
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: [return value]
  15:  Return Value:          return lambda s: func2(func1(s))
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: <anonymous_15_16>
  23:  CALL RETURN:     combined = process_sequence(add_prefix, add_suffix)(taint_src)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: combined
  23:  Var Pass:      combined = process_sequence(add_prefix, add_suffix)(taint_src)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_010_T.py
  AffectedNodeName: taint_sink
  24:  SINK:      taint_sink(combined)  # 输出 "pre___TAINT_SRC_VALUE_post"

------------- 283: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
Line 29: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py","functionName":"higher_order_function_012_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
  AffectedNodeName: taint_src
  18:  SOURCE:  def higher_order_function_012_T(taint_src):
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
  AffectedNodeName: process_callback
  28:  CALL:      result = process_callback(to_upper, taint_src)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
  AffectedNodeName: args
  20:  ARG PASS:      def process_callback(callback: Callable[P, R], *args: P.args, **kwargs: P.kwargs) -> R:
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
  AffectedNodeName: to_upper
  21:  CALL:          return callback(*args, **kwargs)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
  AffectedNodeName: s
  24:  ARG PASS:      def to_upper(s: str) -> str:
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
  AffectedNodeName: [return value]
  25:  Return Value:          return s.upper()
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
  AffectedNodeName: to_upper
  21:  CALL RETURN:         return callback(*args, **kwargs)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
  AffectedNodeName: [return value]
  21:  Return Value:          return callback(*args, **kwargs)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
  AffectedNodeName: process_callback
  28:  CALL RETURN:     result = process_callback(to_upper, taint_src)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
  AffectedNodeName: result
  28:  Var Pass:      result = process_callback(to_upper, taint_src)
 /case/completeness/single_app_tracing/function_call/higher_order_function/higher_order_function_012_T.py
  AffectedNodeName: taint_sink
  29:  SINK:      taint_sink(result)

------------- 284: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/library_function/datetime_001_T.py
Line 17: taint_sink(dt)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/library_function/datetime_001_T.py","functionName":"datetime_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/library_function/datetime_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def datetime_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/library_function/datetime_001_T.py
  AffectedNodeName: process
  19:  CALL:      process(f"2025-03-25 {taint_src}")  # 输入格式化的日期时间字符串
 /case/completeness/single_app_tracing/function_call/library_function/datetime_001_T.py
  AffectedNodeName: time_str
  15:  ARG PASS:      def process(time_str):
 /case/completeness/single_app_tracing/function_call/library_function/datetime_001_T.py
  AffectedNodeName: dt
  16:  Var Pass:          dt = datetime.strptime(time_str, "%Y-%m-%d %H:%M:%S")
 /case/completeness/single_app_tracing/function_call/library_function/datetime_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:          taint_sink(dt)

------------- 285: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/library_function/json_001_T.py
Line 15: taint_sink(obj.key)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/library_function/json_001_T.py","functionName":"json_001_t","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/library_function/json_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def json_001_t(taint_src):
 /case/completeness/single_app_tracing/function_call/library_function/json_001_T.py
  AffectedNodeName: process
  17:  CALL:      process(taint_src)
 /case/completeness/single_app_tracing/function_call/library_function/json_001_T.py
  AffectedNodeName: arg
  13:  ARG PASS:      def process(arg):
 /case/completeness/single_app_tracing/function_call/library_function/json_001_T.py
  AffectedNodeName: obj
  14:  Var Pass:          obj = json.loads(arg)
 /case/completeness/single_app_tracing/function_call/library_function/json_001_T.py
  AffectedNodeName: taint_sink
  15:  SINK:          taint_sink(obj["key"])

------------- 286: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/library_function/math_001_T.py
Line 17: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/library_function/math_001_T.py","functionName":"math_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/library_function/math_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def math_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/library_function/math_001_T.py
  AffectedNodeName: process
  19:  CALL:      process(taint_src)
 /case/completeness/single_app_tracing/function_call/library_function/math_001_T.py
  AffectedNodeName: num
  15:  ARG PASS:      def process(num):
 /case/completeness/single_app_tracing/function_call/library_function/math_001_T.py
  AffectedNodeName: result
  16:  Var Pass:          result = math.sqrt(num)  # 使用math模块的sqrt函数计算num的平方根
 /case/completeness/single_app_tracing/function_call/library_function/math_001_T.py
  AffectedNodeName: taint_sink
  17:  SINK:          taint_sink(result)

------------- 287: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/library_function/os_001_T.py
Line 14: taint_sink(file_path)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/library_function/os_001_T.py","functionName":"os_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/library_function/os_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def os_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/library_function/os_001_T.py
  AffectedNodeName: file_path
  13:  Var Pass:      file_path = os.path.join("/data", taint_src)
 /case/completeness/single_app_tracing/function_call/library_function/os_001_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(file_path)  # 输出拼接后的路径

------------- 288: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/library_function/re_001_T.py
Line 16: taint_sink(words)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/library_function/re_001_T.py","functionName":"re_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/library_function/re_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def re_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/library_function/re_001_T.py
  AffectedNodeName: words
  15:  Var Pass:      words = re.findall(pattern, taint_src)
 /case/completeness/single_app_tracing/function_call/library_function/re_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(words)

------------- 289: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/library_function/string_001_T.py
Line 18: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/library_function/string_001_T.py","functionName":"string_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/library_function/string_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def string_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/library_function/string_001_T.py
  AffectedNodeName: process
  13:  CALL:      process(taint_src)
 /case/completeness/single_app_tracing/function_call/library_function/string_001_T.py
  AffectedNodeName: arg
  16:  ARG PASS:  def process(arg):
 /case/completeness/single_app_tracing/function_call/library_function/string_001_T.py
  AffectedNodeName: result
  17:  Var Pass:      result = arg.strip()
 /case/completeness/single_app_tracing/function_call/library_function/string_001_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(result)

------------- 290: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
Line 31: taint_sink(self.get_data())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py","functionName":"constructor_extends_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def constructor_extends_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: __init__
  12:  CALL:      derived = DerivedClass(taint_src)
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: data
  27:  ARG PASS:      def __init__(self, data):
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: __init__
  28:  CALL:          super().__init__(data)
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: data
  16:  ARG PASS:      def __init__(self, data):
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  17:  Var Pass:          self.data = data
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: derived
  12:  Var Pass:      derived = DerivedClass(taint_src)
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: process
  13:  CALL:      derived.process()
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: derived
  13:  ARG PASS:      derived.process()
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: get_data
  31:  CALL:          taint_sink(self.get_data())
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: self
  31:  ARG PASS:          taint_sink(self.get_data())
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: [return value]
  20:  Return Value:          return self.data
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: get_data
  31:  CALL RETURN:         taint_sink(self.get_data())
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_001_T.py
  AffectedNodeName: taint_sink
  31:  SINK:          taint_sink(self.get_data())

------------- 291: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py
Line 28: taint_sink(self.get_data())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py","functionName":"constructor_extends_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def constructor_extends_003_T(taint_src):
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py
  15:  Var Pass:          self.data = taint_src
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py
  AffectedNodeName: derived
  31:  Var Pass:      derived = DerivedClass()
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py
  AffectedNodeName: process
  32:  CALL:      derived.process()
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py
  AffectedNodeName: derived
  32:  ARG PASS:      derived.process()
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py
  AffectedNodeName: get_data
  28:  CALL:          taint_sink(self.get_data())
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py
  AffectedNodeName: self
  28:  ARG PASS:          taint_sink(self.get_data())
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py
  AffectedNodeName: [return value]
  18:  Return Value:          return self.data
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py
  AffectedNodeName: get_data
  28:  CALL RETURN:         taint_sink(self.get_data())
 /case/completeness/single_app_tracing/function_call/override/constructor_extends_003_T.py
  AffectedNodeName: taint_sink
  28:  SINK:          taint_sink(self.get_data())

------------- 292: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/override/static_method_override_001_T.py
Line 25: taint_sink(Child.get_value())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/override/static_method_override_001_T.py","functionName":"static_method_override_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/override/static_method_override_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def static_method_override_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/override/static_method_override_001_T.py
  AffectedNodeName: [return value]
  23:  Return Value:          return taint_src
 /case/completeness/single_app_tracing/function_call/override/static_method_override_001_T.py
  AffectedNodeName: get_value
  22:  CALL RETURN:       def get_value():
  23:  CALL RETURN:         return taint_src
 /case/completeness/single_app_tracing/function_call/override/static_method_override_001_T.py
  AffectedNodeName: taint_sink
  25:  SINK:      taint_sink(Child.get_value())

------------- 293: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_002_T.py
Line 14: taint_sink(data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_002_T.py","functionName":"return_normal_value_passing_002_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_002_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def return_normal_value_passing_002_T(taint_src):
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_002_T.py
  AffectedNodeName: process
  13:  CALL:      data = process(taint_src)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_002_T.py
  AffectedNodeName: src
  17:  ARG PASS:  def process(src):
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_002_T.py
  AffectedNodeName: [return value]
  18:  Return Value:      return src
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_002_T.py
  AffectedNodeName: process
  13:  CALL RETURN:     data = process(taint_src)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_002_T.py
  AffectedNodeName: data
  13:  Var Pass:      data = process(taint_src)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_002_T.py
  AffectedNodeName: taint_sink
  14:  SINK:      taint_sink(data)

------------- 294: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
Line 19: taint_sink(data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py","functionName":"return_normal_value_passing_004_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
  AffectedNodeName: taint_src
  11:  SOURCE:  def return_normal_value_passing_004_T(taint_src):
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
  AffectedNodeName: inner2
  18:  CALL:      data = inner2(taint_src)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
  AffectedNodeName: a
  15:  ARG PASS:      def inner2(a):
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
  AffectedNodeName: inner1
  16:  CALL:          return inner1(a)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
  AffectedNodeName: b
  12:  ARG PASS:      def inner1(b):
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
  AffectedNodeName: [return value]
  13:  Return Value:          return b
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
  AffectedNodeName: inner1
  16:  CALL RETURN:         return inner1(a)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
  AffectedNodeName: [return value]
  16:  Return Value:          return inner1(a)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
  AffectedNodeName: inner2
  18:  CALL RETURN:     data = inner2(taint_src)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
  AffectedNodeName: data
  18:  Var Pass:      data = inner2(taint_src)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_004_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(data)

------------- 295: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_005_T.py
Line 18: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_005_T.py","functionName":"return_normal_value_passing_005_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_005_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def return_normal_value_passing_005_T(taint_src):
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_005_T.py
  AffectedNodeName: greeting
  17:  CALL:      x = greeting(taint_src)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_005_T.py
  AffectedNodeName: name
  14:  ARG PASS:      def greeting(name: str) -> str:
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_005_T.py
  AffectedNodeName: [return value]
  15:  Return Value:          return 'Hello' + name
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_005_T.py
  AffectedNodeName: greeting
  17:  CALL RETURN:     x = greeting(taint_src)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_005_T.py
  AffectedNodeName: x
  17:  Var Pass:      x = greeting(taint_src)
 /case/completeness/single_app_tracing/function_call/return_value_passing/return_normal_value_passing_005_T.py
  AffectedNodeName: taint_sink
  18:  SINK:      taint_sink(x)

------------- 296: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/static_method/higher_order_001_T.py
Line 24: taint_sink(result)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/static_method/higher_order_001_T.py","functionName":"higher_order_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/static_method/higher_order_001_T.py
  AffectedNodeName: taint_src
  22:  SOURCE:  def higher_order_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/static_method/higher_order_001_T.py
  AffectedNodeName: execute_operation
  23:  CALL:      result = execute_operation(Calculator.add_taint, taint_src, "_")
 /case/completeness/single_app_tracing/function_call/static_method/higher_order_001_T.py
  AffectedNodeName: a
  18:  ARG PASS:  def execute_operation(op_func, a, b):
 /case/completeness/single_app_tracing/function_call/static_method/higher_order_001_T.py
  AffectedNodeName: [return value]
  15:  Return Value:          return f"{a}_{b}"  # 污点扩展
 /case/completeness/single_app_tracing/function_call/static_method/higher_order_001_T.py
  AffectedNodeName: add_taint
  14:  CALL RETURN:     def add_taint(a, b):
  15:  CALL RETURN:         return f"{a}_{b}"  # 污点扩展
 /case/completeness/single_app_tracing/function_call/static_method/higher_order_001_T.py
  AffectedNodeName: [return value]
  19:  Return Value:      return op_func(a, b)  # 调用传入的静态方法
 /case/completeness/single_app_tracing/function_call/static_method/higher_order_001_T.py
  AffectedNodeName: execute_operation
  23:  CALL RETURN:     result = execute_operation(Calculator.add_taint, taint_src, "_")
 /case/completeness/single_app_tracing/function_call/static_method/higher_order_001_T.py
  AffectedNodeName: result
  23:  Var Pass:      result = execute_operation(Calculator.add_taint, taint_src, "_")
 /case/completeness/single_app_tracing/function_call/static_method/higher_order_001_T.py
  AffectedNodeName: taint_sink
  24:  SINK:      taint_sink(result)  # 输出 "10_5_#taint_src_value"

------------- 297: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/function_call/static_method/static_access_001_T.py
Line 25: taint_sink(DataProcessor.get_static_data())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/function_call/static_method/static_access_001_T.py","functionName":"static_access_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/function_call/static_method/static_access_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def static_access_001_T(taint_src):
 /case/completeness/single_app_tracing/function_call/static_method/static_access_001_T.py
  18:  Var Pass:          DataProcessor.__taint_storage = src
 /case/completeness/single_app_tracing/function_call/static_method/static_access_001_T.py
  AffectedNodeName: [return value]
  22:  Return Value:          return DataProcessor.__taint_storage
 /case/completeness/single_app_tracing/function_call/static_method/static_access_001_T.py
  AffectedNodeName: get_static_data
  21:  CALL RETURN:       def get_static_data():
  22:  CALL RETURN:         return DataProcessor.__taint_storage
 /case/completeness/single_app_tracing/function_call/static_method/static_access_001_T.py
  AffectedNodeName: taint_sink
  25:  SINK:      taint_sink(DataProcessor.get_static_data())

------------- 298: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/variable_scope/global/global_001_T.py
Line 16: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/variable_scope/global/global_001_T.py","functionName":"global_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/variable_scope/global/global_001_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def global_001_T(taint_src):
 /case/completeness/single_app_tracing/variable_scope/global/global_001_T.py
  AffectedNodeName: x
  15:  Var Pass:      x = taint_src
 /case/completeness/single_app_tracing/variable_scope/global/global_001_T.py
  AffectedNodeName: taint_sink
  16:  SINK:      taint_sink(x)

------------- 299: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/variable_scope/global/global_003_T.py
Line 17: taint_sink(x+y)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/variable_scope/global/global_003_T.py","functionName":"global_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/variable_scope/global/global_003_T.py
  AffectedNodeName: taint_src
  13:  SOURCE:  def global_003_T(taint_src):
 /case/completeness/single_app_tracing/variable_scope/global/global_003_T.py
  AffectedNodeName: x
  15:  Var Pass:      x = taint_src
 /case/completeness/single_app_tracing/variable_scope/global/global_003_T.py
  AffectedNodeName: taint_sink
  17:  SINK:      taint_sink(x + y)

------------- 300: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/variable_scope/nonlocal/nonlocal_001_T.py
Line 20: taint_sink(x)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/variable_scope/nonlocal/nonlocal_001_T.py","functionName":"nonlocal_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/variable_scope/nonlocal/nonlocal_001_T.py
  AffectedNodeName: taint_src
  14:  SOURCE:  def nonlocal_001_T(taint_src):
 /case/completeness/single_app_tracing/variable_scope/nonlocal/nonlocal_001_T.py
  AffectedNodeName: x
  19:  Var Pass:          x = taint_src+"inner"  # 修改外层作用域中的 x
 /case/completeness/single_app_tracing/variable_scope/nonlocal/nonlocal_001_T.py
  AffectedNodeName: taint_sink
  20:  SINK:          taint_sink(x)

------------- 301: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py
Line 24: taint_sink(o.get_data())
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py","functionName":"private_variable_001_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def private_variable_001_T(taint_src):
 /case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py
  AffectedNodeName: data
  23:  Var Pass:      o = A(data=taint_src)  # 显式传递 taint_src
 /case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py
  AffectedNodeName: __init__
  23:  CALL:      o = A(data=taint_src)  # 显式传递 taint_src
 /case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py
  AffectedNodeName: data
  14:  ARG PASS:          def __init__(self, data):
 /case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py
  15:  Var Pass:              self.__data = data
 /case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py
  AffectedNodeName: get_data
  24:  CALL:      taint_sink(o.get_data())
 /case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py
  AffectedNodeName: o
  24:  ARG PASS:      taint_sink(o.get_data())
 /case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py
  AffectedNodeName: [return value]
  18:  Return Value:              return self.__data
 /case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py
  AffectedNodeName: get_data
  24:  CALL RETURN:     taint_sink(o.get_data())
 /case/completeness/single_app_tracing/variable_scope/private_variable/private_variable_001_T.py
  AffectedNodeName: taint_sink
  24:  SINK:      taint_sink(o.get_data())

------------- 302: taint_flow_test-------------
Description:taint_flow_test，回归测试使用，不推荐外部使用
File:/case/completeness/single_app_tracing/variable_scope/static_variable/static_variable_003_T.py
Line 19: taint_sink(Child.static_data)
SINK RULE:taint_sink
entrypoint:
{"filePath":"/case/completeness/single_app_tracing/variable_scope/static_variable/static_variable_003_T.py","functionName":"static_variable_003_T","attribute":"fullCallGraphMade","type":"functionCall","funcReceiverType":""}
Trace:
 /case/completeness/single_app_tracing/variable_scope/static_variable/static_variable_003_T.py
  AffectedNodeName: taint_src
  12:  SOURCE:  def static_variable_003_T(taint_src):
 /case/completeness/single_app_tracing/variable_scope/static_variable/static_variable_003_T.py
  AffectedNodeName: static_data
  17:  Var Pass:          static_data = taint_src  # 子类覆盖父类静态变量
 /case/completeness/single_app_tracing/variable_scope/static_variable/static_variable_003_T.py
  AffectedNodeName: taint_sink
  19:  SINK:      taint_sink(Child.static_data)
==========================================================
  #Total-findings:302
==========================================================